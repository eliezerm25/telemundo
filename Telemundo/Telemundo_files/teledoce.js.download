teledoce = {};

teledoce.infinite_scroll = false;
teledoce.debug = false;

teledoce.init = function(){

  if(teledoce.user.get()){
    jQuery('.user__icon').addClass('on');


    if(gtag){
      gtag('set', {'user_id': teledoce.user.get().id}); // Set the user ID using signed-in user_id.
      console.log('user id set to '+teledoce.user.get().id);
    }


  }else{


    jQuery('.mobile-header__user__icon').click(
      function(){
        overlayLogin();
        return false;
      }
    );

  }

  initFavButtons();

  teledoce.is_mobile = jQuery(window).width()<=1024;


  teledoce.infinite_scroll = jQuery('a.load-more').length>0;

  jQuery('body').removeClass('loading');

  // window.history.pushState({"html":document.documentElement.innerHTML,"pageTitle":'Teledoce.com'},"", location.href);


  window.onpopstate = function(event) {
    
    if(event.state){
      refreshContent(event.state.html, false);
      return event;
    }else{
      // Force reload for first state
      location.reload();
      return false;
    }

    
  };


  // Stream carousels
  var $stream_sliders = $('.mode-carousel, .mode-show-carousel');

  if($stream_sliders.length > 0){

    $stream_sliders.each(
      function(i,o){

        const mobileSlides =  jQuery(o).attr('data-mobile-slides');

        var slides = parseFloat(jQuery(o).attr('data-slides'));
        if(slides==0) slides=1;

        if(teledoce.is_mobile) slides=mobileSlides?mobileSlides:2;

        var w = (jQuery(o).width()-10)/slides;

      

        var options = {
          maxSlides: slides,
          slideWidth: w,
          slideMargin: 10, 
          captions: false,
          responsive: true,
          auto: true,
          autoHover: true,
          pager: false,
          touchEnabled: false,
          touchEnabled: false
        }




        if(w<200) jQuery(o).find('.title').addClass('font-4');
        if(w<400) jQuery(o).find('.title').addClass('font-3');

        if (teledoce.is_mobile && (window.location.href.indexOf('portada')>-1 || window.location.href==('https://www.teledoce.com/'))) return;

        $bxs = jQuery(o).find('ul').bxSlider(options);

        jQuery(o).on('mouseenter', (e) => { jQuery(this).find('.bx-wrapper').addClass('paused'); });
        jQuery(o).on('mouseleave', (e) => { jQuery(this).find('.bx-wrapper').removeClass('paused'); });


        
      }
    );

  }




  


  if(teledoce.is_mobile){


    jQuery('.sticky-footer a').click(
      function(e){

        e.stopPropagation();

        if(jQuery(this).attr('id') == 'backtotop'){

          jQuery('body, html').animate({scrollTop: 0});

          return false;
        }else{
          return true;
        }




      }
    );


    jQuery('_.hamburger').click(
      function(){

        var $header = jQuery('#mobile-header');

        var $hamburger = jQuery(this);



        if($hamburger.hasClass('is-active')){

          var h = $header.attr('data-height');

          
          jQuery('#mobile-header .nav').fadeOut(
            function(){
              
              
            }
          )

          jQuery('#mobile-header').animate({'height':h+'px'});

          $hamburger.removeClass('is-active');


        }else{

          var h = jQuery('#mobile-header').height();

          // console.log(h);

          $header.attr('data-height', h);

          jQuery('#mobile-header').animate(
            {'height':'200%'},
            function(){
              
              
            }
          );

          jQuery('#mobile-header .nav').fadeIn() 

          $hamburger.addClass('is-active');
          
        }

        
      } 
    );

  }else{


    jQuery('.search__trigger').click(
      function(){

        if(jQuery('.site-header .search').hasClass('on')){
          jQuery('.site-header .search').removeClass('on');

          jQuery('body').removeClass('--search');

        }else{
          jQuery('.site-header .search').addClass('on').find('input').focus();
          jQuery('.hamburger').fadeOut();

          jQuery('body').addClass('--search');
        }

        return false;
        

      }
    );

  }



  // jQuery('.user__icon').click(
  //   function(){

  //     if(teledoce.user.get()){
  //         window.open(teledoce.path() + 'mi-tele' ,'_self');
  //     }else{

  //       overlayLogin();

  //         // window.open(teledoce.path() + 'mi-tele/login' ,'_self');
  //     }

  //     return false;

  //   }
  // );



  jQuery('.hamburger').click(
    function(){

      var $mobile_header = document.getElementById('mobile-header');
      var $desktop_header = document.getElementById('desktop-header');

      if(teledoce.is_mobile){


        if($mobile_header.classList.contains('menu')){
          jQuery('body').removeClass('noscroll').removeClass('menu');
          document.getElementById('mobile-header').classList.remove('menu');
        }else{
          jQuery('body').addClass('noscroll').addClass('menu');
          document.getElementById('mobile-header').classList.add('menu');
        }


      }else{


        if(jQuery('body').hasClass('menu')){
          jQuery('body').removeClass('noscroll').removeClass('menu');
        }else{
          jQuery('body').addClass('noscroll').addClass('menu');
        }
        
        
      }

      return false;


    }
      
      
  );

//   document.getElementById('__mobile-header').querySelector('.hamburger').addEventListener('click',
//     function(){

//       var $mobile_header = document.getElementById('mobile-header');
      
//       if($mobile_header.classList.contains('menu')){
        
//         jQuery('body').removeClass('noscroll');
//         document.getElementById('mobile-header').classList.remove('menu');

//       }else{
//         jQuery('body').addClass('noscroll');
//         document.getElementById('mobile-header').classList.add('menu');
//       }
      
//       return false;
//     }
//   );

}



teledoce.path = function(){

  if(location.href.toLowerCase().indexOf('localhost')){
    return '/teledoce/';
  }else{
    return '/';
  }

}



teledoce.user = {

  _: {  },


  isMyFavorite: function(p, callback){

    // Un-comment this!
    return;

    jQuery.ajax({
      type: "POST",
      url: teledoce_ajax_object.ajax_url,
      dataType: "json",
      data:
      {
        action : 'is_my_favorite',
        post: p,
        user: teledoce.user.get()
      },

      beforeSend: function(){},
      complete: function(r){
        callback(r);
      },
      success: function( r ){

        callback(r);
        return;
        
      }
    });

  },


  isFavorite: function(p, callback){

    // Un-comment this!
    return;


    jQuery.ajax({
      type: "POST",
      url: teledoce_ajax_object.ajax_url,
      dataType: "json",
      data:
      {
        action : 'add_to_favorites',
        post: p,
        type: 'post',
        user: teledoce.user.get()
      },

      beforeSend: function(){},
      complete: function(r){
        // callback(r);
      },
      success: function( r ){

        callback(r);
        return;
        
      }
    });

  },

  addFavorite: function(p, callback){

    // let current_favs = getCookie('T12UCOOKIES');


    // if(current_favs){
    //   current_favs = current_favs.split(',');
    // }else{
    //   current_favs = [];
    // }

    // console.log(current_favs);

    // if(current_favs.indexOf(p) < 0) current_favs.push(p);

    // console.log(current_favs);


    // setCookie('T12UCOOKIES', current_favs.join(','), 365);


    // return;

    jQuery.ajax({
      type: "POST",
      url: teledoce_ajax_object.ajax_url,
      dataType: "json",
      data:
      {
        action : 'add_to_favorites',
        post: p,
        type: 'post',
        user: teledoce.user.get()
      },

      beforeSend: function(){},
      complete: function(r){
        // callback(r);
      },
      success: function( r ){

        callback(r);
        return;
        
      }
    });

  },

  getFavorites: function(callback){

    jQuery.ajax({
      type: "POST",
      url: teledoce_ajax_object.ajax_url,
      dataType: "json",
      data:
      {
        action : 'get_favorites',
        type: 'post',
        user: teledoce.user.get()
      },

      beforeSend: function(){},
      complete: function(r){
        // callback(r);
      },
      success: function( r ){

        callback(r);
        return;
        
      }
    });

  },


  login: function(e, p, callback){

    jQuery.ajax({
      type: "POST",
      // url: teledoce_ajax_object.ajax_url,
      url: '/teledoceusers/',
      dataType: "json",
      data:
      {
        action : 'user_login',
        email: e,
        password: p
      },

      beforeSend: function(){},
      complete: function(r){
        console.log(r);
      },
      success: function( r ){

        console.log(r);

        if(r.success){
          
          teledoce.user.set(r.result.user);
        }

        callback(r);
        return;
        
      }
    });

  },

  logout: function(){
    document.cookie = 'T12UID=;expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/';
    document.cookie = 'T12USECRET=;expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/';
    document.cookie = 'T12UNAME=;expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/';
    // location.href = teledoce.getBasePath();

    // if(isLocalHost()){
    //   location.href = '/teledoce';
    // }else{
    //   location.href = '/';  
    // }
    
  },

  set: function(user){
    setCookie('T12UID', user.id, 30);
    setCookie('T12USECRET', user.secret, 30);
    setCookie('T12UNAME', user.name, 30);
    setCookie('T12UGEOBLOCK', user.geoblock, 30);
    setCookie('T12UACTIVATED', user.activated?'1':'0', 30);
    
  },

  get: function(){

    var current_user_id = getCookie('T12UID');
    var current_user_name = getCookie('T12UNAME');

    if(current_user_id == '') return false;

    return {
      id: current_user_id,
      name: current_user_name,
      token: getCookie('T12UTOKEN'),
      secret: getCookie('T12USECRET'),
      geoblock: getCookie('T12UGEOBLOCK'),
      activated: getCookie('T12UACTIVATED')=='1'
    }

  },


  load: function(callback){


    var u = teledoce.user.get();

    jQuery.ajax({
    type: "POST",
    url: teledoce_ajax_object.ajax_url,
    dataType: "json",
    data:
    {
      action : 'user_load',
      id: u.id
    },

    beforeSend: function(){},
    complete: function(r){
      // console.log(r);
    },
    success: function( r ){

      // console.log(r);

      if(r.success){
        // console.log(r.result.user);
        // teledoce.user.set(r.result.user);
      }

      callback(r);

      
      return;
      
    }
  });

  }

}



jQuery(document).ready(
	function(){

    teledoce.init();
    activateSearch();


    jQuery('.load-more').click(
      function(){


        var $a = jQuery(this);
        var t = $a.offset().top;

        // where to fetch ajax loaded posts, by default is ...
        var target = jQuery(this).attr('data-target');

        // console.log(t);

        $a.addClass('loading');
        
        var $ul = jQuery(this).parent().find('ul');
        var $section = $ul.closest('section');
        var section_id = $section.attr('id');


        if(section_id){
          var source_selector = '#'+section_id;
        }else{
          var source_selector = '.content-list';
        }

        
        var page = parseInt(jQuery(this).attr('data-page'));
        var url_prefix = jQuery(this).attr('data-url-prefix');
        var forced_url = jQuery(this).attr('data-forced-url');

        if(!url_prefix) url_prefix = '';

        if(isNaN(page)) page=1;

        page++;

        jQuery(this).attr('data-page', page)

        var url = location.href;

        if(url.indexOf('?')){
           url_parts = url.split('?');
           url=url_parts[0];
        }

        if(location.href.indexOf('show/')<0 || location.href.indexOf('programa/')<0) url_prefix = 'page/';

        if (window.location.href.lastIndexOf('/')!=window.location.href.length-1) {
          url += '/'+url_prefix+page;
        } else {
          url += url_prefix+page;
        }

        if (forced_url) url = forced_url+'/'+page;

        console.log('url', url);
        

        if(url_parts[1]) url=url+'?'+url_parts[1];

        if(teledoce.debug) console.log('Fetching... '+url);

        jQuery.get(
          url,
          function(r){

            var $lis = jQuery(r).find(source_selector).find('li');

            if(teledoce.debug) console.log('Load more results...', r);
            if(teledoce.debug) console.log('source_selector...', source_selector);
            if(teledoce.debug) console.log('source_selector res:', $lis);
            if(teledoce.debug) console.log('$ul:', $ul);


            if($lis.length == 0){

              jQuery('.load-more').remove();
              return;

            }else{
              // reactivate infinit scroll
              teledoce.infinite_scroll=true;
            }


            jQuery($lis).each(
              function(i,o){
                $ul.append(jQuery(o));
              }
            );

            // jQuery('html, body').animate({'scrollTop': t});



            // Process links and lazyload loaded thumbs
            processLinks();
            
            lazyload();
            

            $a.removeClass('loading');

            // console.log($lis);


            // jQuery('#mobile-header').removeClass('glass').addClass('solid');
            
            // var content = jQuery(r).find('#content').html();

            // window.history.pushState({"html":r,"pageTitle":r.pageTitle},"", url);

            // jQuery('html, body').scrollTop(0);

            // jQuery('#content').hide().html(content).show();

            // correctVideoIframeHeight();

            // processLinks();

            

          }
        ).fail(function() {
          // error...
        });



        return false;


      }
    );


    scrollWatch();

    processLinks();

    correctVideoIframeHeight();

    lazyload();
    


		
		jQuery('_.hamburger').click(
			function(){

        var $header = jQuery('#mobile-header');

        var $hamburger = jQuery(this);



				if($hamburger.hasClass('is-active')){

          var h = $header.attr('data-height');

          
					jQuery('#mobile-header .nav').fadeOut(
            function(){
              
              
            }
          )

          jQuery('#mobile-header').animate({'height':h+'px'});

          $hamburger.removeClass('is-active');


				}else{

          var h = jQuery('#mobile-header').height();

          // console.log(h);

          $header.attr('data-height', h);

					jQuery('#mobile-header').animate(
            {'height':'200%'},
            function(){
              
              
            }
          );

          jQuery('#mobile-header .nav').fadeIn() 

          $hamburger.addClass('is-active');
          
				}

				
			}	
		);



		jQuery('.content-list.mode-mosaic li').each(
function(i,o){
var $li = (jQuery(o));
var w = $li.width();
var h = 400/640*w;
$li.height(h);
}
);


	}
);


function initFavButtons(){


  jQuery('a.add_fav--recetas, a.add_fav--posts, a.tofav').click(
      function(a){

        a.stopPropagation();

        if(jQuery(this).hasClass('my')){
          jQuery(this).removeClass('my');
          jQuery(this).parent().find('.fav__message').removeClass('fav__message--on');
        }else{
          jQuery(this).addClass('my');
          jQuery(this).parent().find('.fav__message').addClass('fav__message--on');  
        }

        teledoce.user.addFavorite(
          jQuery(this).attr('data-id'),

          (r) => {

            

          }

        );

        return false;

      }
    );


  jQuery('a.add_fav:not(.my), a.tofav:not(.my)').each(

    function(i,o){

      var id = jQuery(o).attr('data-id');

      teledoce.user.isMyFavorite(
        id,
        function(r){
          jQuery(o).show();
          if(r.result) jQuery(o).addClass('my'); 
        }
      );

        

    }

  );

}



function telemundoNavToggle(){

  if(document.querySelector('.telemundo-nav').classList.contains('on')){
    document.querySelector('.telemundo-nav').classList.remove('on');
  }else{
    document.querySelector('.telemundo-nav').classList.add('on');  
  }
  

}


// Correct Samba videos iframe heights
function correctVideoIframeHeight(x){


  jQuery.each(
    
    jQuery('iframe'),

    function(i,o){

      if(jQuery(o).hasClass('noresize')) return;

      var src = jQuery(o).attr('src');

      if(src==undefined) return;



      var is_youtube = (src.indexOf('youtube.com') > -1);
      var is_vzaar = (src.indexOf('vzaar.com') > -1);
      var is_mediastream = (src.indexOf('mdstrm.com') > -1);
      var is_samba = (src.indexOf('liquidplatform.com') > -1);
      var is_livestream = (src!=undefined && src.indexOf('livestream.com') > -1);
      var is_fb = (src!=undefined && src.indexOf('facebook.com') > -1);

      // If MS video, abort
      // if(is_mediastream) return;

      if(!(is_mediastream || is_youtube || is_vzaar || is_samba || is_livestream || is_fb)) return;

      var w = jQuery(o).prop('width');
      var h = jQuery(o).prop('height');

      // if(jQuery(o).hasClass('tape-isla')){
      //  var r = 5/3;
      // }else{
      //  var r = 16/9; 
      // }

      if(is_youtube){
        var r=702/395;
      }else{

        var r=w/h;
      }
      

      if(isNaN(r)) return;

      // console.log('width: '+w);
      // console.log('height: '+h);
      

      var w2 = jQuery(o).width();
      var h2 = w2/r;

      jQuery(o).height(h2);

    }

  )

  

}




function telemundoHome(){

  if(teledoce.is_mobile){

    var n = 1;


    jQuery('.telemundo-home nav a').click(
      function(){

        var c = jQuery(this).attr('href').replace('#', '');


        jQuery('.telemundo-home nav a.on').removeClass('on');
        jQuery(this).addClass('on');

        jQuery('.telemundo-home .content-list.on').removeClass('on');
        jQuery('.telemundo-home .content-list.__'+c).addClass('on');

        jQuery(this).addClass('on');

        jQuery('.telemundo-home').removeClass('on');

        return false;

      }
    );

    
    jQuery('.telemundo-home a.__mobile').click(
      function(){

        if(jQuery('.telemundo-home').hasClass('on')){
          jQuery('.telemundo-home').removeClass('on');
        }else{
          jQuery('.telemundo-home').addClass('on');  
        }
        

        // var N = jQuery('.telemundo-home .content-list').length;

        

        // if(jQuery(this).hasClass('__left')){
        //   n--;
        // }else{
        //   n++;
        // }

        // console.log("--");
        // console.log(N);
        // console.log(n);
        // console.log("--");

        // if(n<1){
        //   n=N;
        // }

        // if(n>=N){
        //   n=1;
        // }

        // jQuery('.telemundo-home .content-list.on').removeClass('on');
        // jQuery('.telemundo-home .content-list').eq(n).addClass('on');

        return false;

      }
    );

  }else{

    jQuery('.telemundo-home nav a').click(
      function(){

        var c = jQuery(this).attr('href').replace('#', '');


        jQuery('.telemundo-home nav a.on').removeClass('on');
        jQuery(this).addClass('on');

        jQuery('.telemundo-home .content-list.on').removeClass('on');
        jQuery('.telemundo-home .content-list.__'+c).addClass('on');

        jQuery(this).addClass('on');

        return false;

      }
    );


  }

  

}



function scrollWatch(){

  var st = jQuery(window).scrollTop();
  var wh = jQuery(window).height();
  var dh = jQuery(document).height();

  jQuery(window).scroll(
    function(){

      var a = jQuery(window).scrollTop()-st;
      var b = Math.abs(a)/a;
      var c = jQuery(window).scrollTop();

      var d = (c + wh - dh); // dist. to bottom


      var near_bottom = jQuery(window).scrollTop() + jQuery(window).height() > jQuery(document).height() - 70;
      var near_top = jQuery(window).scrollTop() < 200;

      jQuery('.willow').html(jQuery(window).scrollTop() + jQuery(window).height() + ' / ' + jQuery(document).height());


      if(st < 110){
        jQuery('#desktop-header').addClass('--stacked');
      }else{
        jQuery('#desktop-header').removeClass('--stacked');
      }


      // if(d > -10){
      //   jQuery('body').addClass('bottom');
      // }else{
      //   jQuery('body').removeClass('bottom');
      // }

      if(teledoce.infinite_scroll){

        var $trigger = jQuery('a.load-more');
        if($trigger.length>0 && $trigger.offset().top < (jQuery(window).scrollTop() + jQuery(window).height())){
          $trigger.click();
          teledoce.infinite_scroll=false;
        }


      }

      // console.log(c);

      // if(c<70){

      //   // jQuery('body').addClass('stacked-header');
      //   if(b>0 || c == 0) jQuery('body').removeClass('scrolled-up')
      //   jQuery('body').removeClass('scrolled-down');
      //   jQuery('body').removeClass('__prev__scroll');
      //   return;
      // }else{
      //   // jQuery('body').removeClass('stacked-header');
      // }

      // jQuery('body').addClass('__prev__scroll');

      // if(c<80) return;

      // jQuery('body').removeClass('__prev__scroll');


      // If menu is ON, do nothing
      if(jQuery('#mobile-header').hasClass('menu')) return;

      if(c<70){
        // jQuery('#mobile-header').addClass('no-transition').css('top', -c);
        return;
      }



      
      if(near_bottom || near_top  || teledoce.is_mobile&&b<0){
        jQuery('body').addClass('scrolled-up').removeClass('scrolled-down');
      }else{
        jQuery('body').addClass('scrolled-down').removeClass('scrolled-up');
      }

      st = jQuery(window).scrollTop();
    }
  );

}


function refreshContent(r, history){

    jQuery('#mobile-header').removeClass('glass').addClass('solid');
    
    var content = jQuery(r).find('#content').html();
    var footer = jQuery(r).find('.sticky-footer').html();

    
    if(history) window.history.pushState({"html":r,"pageTitle":r.pageTitle},"", url);

    jQuery('body').removeClass('scrolled-down');


    jQuery('#content').addClass('loading');

    setTimeout(
      function(){

        jQuery('html, body').scrollTop(0);

        jQuery('#content').html(content).removeClass('loading');
        jQuery('.sticky-footer').html(footer);

        correctVideoIframeHeight();

        processLinks();

        lazyload();

      },
      1000
    );


}


function lazyload(){
  
  teledoce.lazyLoadInstance = new LazyLoad(
    {
      elements_selector: ".lazyload",
      callback_error: (el)=>{console.log("Error", el)}
    }

  );

  // setTimeout(

  //   function(){
  //     teledoce.lazyLoadInstance.loadAll();
  //   },

  //   5000

  // );

}


function processLinks($context){

  if($context){
    $post_link = jQuery('.post-link', $context);
  }else{
    $post_link = jQuery('.post-link');
  }


  if(jQuery('.load-more').length>0) teledoce.infinite_scroll = true;

  return;

  $post_link.click(
      function(){

        // return true;

        // if(!jQuery(this).hasClass('wil')) return true;

        var $a = jQuery(this);

        var url = $a.attr('href');
        var vid = $a.attr('data-video');

        var t = jQuery(this).offset().top;


        var body = jQuery("html, body");
        

            // Disable for LEP
            if(url.indexOf('/la-eterna-promesa/')>-1) return true;
            

            if($a.hasClass('loading')) return;

            $a.addClass('loading');


            $a.find('.thumb').prepend('<span class="loader">');


            var data = {};
            data.user = teledoce.user.get();


            jQuery.get(
              url,
              data,
              function(r){

                jQuery('#mobile-header').removeClass('glass').addClass('solid');
                
                var content = jQuery(r).find('#content').html();
                var footer = jQuery(r).find('.sticky-footer').html();

                
                window.history.pushState({"html":r,"pageTitle":r.pageTitle},"", url);

                jQuery('body').removeClass('scrolled-down');

                var body_class = jQuery(r).find('#content').attr('bodyclass');

                jQuery('#content').addClass('loading');

                setTimeout(
                  function(){

                    jQuery('body').attr('class', body_class);

                    jQuery('html, body').scrollTop(0);
                    jQuery('#content').html(content).removeClass('loading');
                    jQuery('.sticky-footer').html(footer);

                    // REFRESH ADMIN BAR

                    $wpadminbar = jQuery(r).find('#wp-admin-bar-edit');
                    
                    if($wpadminbar.length>0 && jQuery('#wp-admin-bar-edit').length>0){
                      jQuery('#wp-admin-bar-edit').replaceWith($wpadminbar);
                    }

                    //


                    correctVideoIframeHeight();

                    processLinks();

                    lazyload();

                    initFavButtons();

                  },
                  0
                );


                

                

              }
            );



        // $a.find('.play').html('<i class="fas fa-circle-notch"></i>');

        return false;

      }
    );


}









function ms(id){


   // Options:
   var playerOptions = {
    width: 640, // Width in pixels
    height: 360, // Height in pixels
    type: "media", // Video type. Possible values: "media", "live"
    id: id, // Video ID
    autoplay: false, // Enable autoplay. Possible values: true, false
    events: { // Callbacks to be triggered when certain actions are executed by the player. All optional.
     onPlayerReady: function() { // Optional callback to be triggered as soon as the player has finished loading
      console.log("Player is ready");

      // Player can be controlled using the API's methods
      player.videoPlay();

     },
     onPlay: function() { // Optional callback to be triggered as soon as the player starts playing
      console.log("Playing...");
     },
     onVideoEnd: function() { // Optional callback to be triggered when the video ends playing
      console.log("Video just ended");
     },
     onVideoStop: function() { // Optional callback to be triggered when the user stops or pauses the video
      console.log("User stopped or paused the video");
     },
     onVideoError: function() { // Optional callback to be triggered when there's a playback error
      console.log("There was an error while loading the video");
     },
     onVolumeChange: function(volume) { // Optional callback to be triggered when volume is changed (0-100)
      console.log("Volume was changed to " + volume);
     },
     onTimeUpdate: function(time) { // Optional callback to be triggered when time is updated
       console.log("Current time is " + time);
     },
     onFullscreenChange: function(fullscreen) { // Optional callback to be triggered when fullscreen status change
       console.log("Is fullscreen " + fullscreen);
     }
    }
   };

   // The class MediastreamPlayer is used to create a new player instance
   // First argument is the #ID of the containing element. Second argument is an Object of options
   var player = new MediastreamPlayer("mdstrm-player", playerOptions);

   


}





// Libraries

/**
 * bxSlider v4.2.12
 * Copyright 2013-2015 Steven Wanderski
 * Written while drinking Belgian ales and listening to jazz
 * Licensed under MIT (http://opensource.org/licenses/MIT)
 */
 
/**
 * bxSlider v4.2.12
 * Copyright 2013-2015 Steven Wanderski
 * Written while drinking Belgian ales and listening to jazz
 * Licensed under MIT (http://opensource.org/licenses/MIT)
 */

;(function($) {

  var defaults = {

    // GENERAL
    mode: 'horizontal',
    slideSelector: '',
    infiniteLoop: true,
    hideControlOnEnd: false,
    speed: 500,
    easing: null,
    slideMargin: 0,
    startSlide: 0,
    randomStart: false,
    captions: false,
    ticker: false,
    tickerHover: false,
    adaptiveHeight: false,
    adaptiveHeightSpeed: 500,
    video: false,
    useCSS: true,
    preloadImages: 'visible',
    responsive: true,
    slideZIndex: 50,
    wrapperClass: 'bx-wrapper',

    // TOUCH
    touchEnabled: true,
    swipeThreshold: 50,
    oneToOneTouch: true,
    preventDefaultSwipeX: true,
    preventDefaultSwipeY: false,

    // ACCESSIBILITY
    ariaLive: true,
    ariaHidden: true,

    // KEYBOARD
    keyboardEnabled: false,

    // PAGER
    pager: true,
    pagerType: 'full',
    pagerShortSeparator: ' / ',
    pagerSelector: null,
    buildPager: null,
    pagerCustom: null,

    // CONTROLS
    controls: true,
    nextText: 'Next',
    prevText: 'Prev',
    nextSelector: null,
    prevSelector: null,
    autoControls: false,
    startText: 'Start',
    stopText: 'Stop',
    autoControlsCombine: false,
    autoControlsSelector: null,

    // AUTO
    auto: false,
    pause: 4000,
    autoStart: true,
    autoDirection: 'next',
    stopAutoOnClick: false,
    autoHover: false,
    autoDelay: 0,
    autoSlideForOnePage: false,

    // CAROUSEL
    minSlides: 1,
    maxSlides: 1,
    moveSlides: 0,
    slideWidth: 0,
    shrinkItems: false,

    // CALLBACKS
    onSliderLoad: function() { return true; },
    onSlideBefore: function() { return true; },
    onSlideAfter: function() { return true; },
    onSlideNext: function() { return true; },
    onSlidePrev: function() { return true; },
    onSliderResize: function() { return true; }
  };

  $.fn.bxSlider = function(options) {

    if (this.length === 0) {
      return this;
    }

    // support multiple elements
    if (this.length > 1) {
      this.each(function() {
        $(this).bxSlider(options);
      });
      return this;
    }

    // create a namespace to be used throughout the plugin
    var slider = {},
    // set a reference to our slider element
    el = this,
    // get the original window dimens (thanks a lot IE)
    windowWidth = $(window).width(),
    windowHeight = $(window).height();

    // Return if slider is already initialized
    if ($(el).data('bxSlider')) { return; }

    /**
     * ===================================================================================
     * = PRIVATE FUNCTIONS
     * ===================================================================================
     */

    /**
     * Initializes namespace settings to be used throughout plugin
     */
    var init = function() {
      // Return if slider is already initialized
      if ($(el).data('bxSlider')) { return; }
      // merge user-supplied options with the defaults
      slider.settings = $.extend({}, defaults, options);
      // parse slideWidth setting
      slider.settings.slideWidth = parseInt(slider.settings.slideWidth);
      // store the original children
      slider.children = el.children(slider.settings.slideSelector);
      // check if actual number of slides is less than minSlides / maxSlides
      if (slider.children.length < slider.settings.minSlides) { slider.settings.minSlides = slider.children.length; }
      if (slider.children.length < slider.settings.maxSlides) { slider.settings.maxSlides = slider.children.length; }
      // if random start, set the startSlide setting to random number
      if (slider.settings.randomStart) { slider.settings.startSlide = Math.floor(Math.random() * slider.children.length); }
      // store active slide information
      slider.active = { index: slider.settings.startSlide };
      // store if the slider is in carousel mode (displaying / moving multiple slides)
      slider.carousel = slider.settings.minSlides > 1 || slider.settings.maxSlides > 1 ? true : false;
      // if carousel, force preloadImages = 'all'
      if (slider.carousel) { slider.settings.preloadImages = 'all'; }
      // calculate the min / max width thresholds based on min / max number of slides
      // used to setup and update carousel slides dimensions
      slider.minThreshold = (slider.settings.minSlides * slider.settings.slideWidth) + ((slider.settings.minSlides - 1) * slider.settings.slideMargin);
      slider.maxThreshold = (slider.settings.maxSlides * slider.settings.slideWidth) + ((slider.settings.maxSlides - 1) * slider.settings.slideMargin);
      // store the current state of the slider (if currently animating, working is true)
      slider.working = false;
      // initialize the controls object
      slider.controls = {};
      // initialize an auto interval
      slider.interval = null;
      // determine which property to use for transitions
      slider.animProp = slider.settings.mode === 'vertical' ? 'top' : 'left';
      // determine if hardware acceleration can be used
      slider.usingCSS = slider.settings.useCSS && slider.settings.mode !== 'fade' && (function() {
        // create our test div element
        var div = document.createElement('div'),
        // css transition properties
        props = ['WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective'];
        // test for each property
        for (var i = 0; i < props.length; i++) {
          if (div.style[props[i]] !== undefined) {
            slider.cssPrefix = props[i].replace('Perspective', '').toLowerCase();
            slider.animProp = '-' + slider.cssPrefix + '-transform';
            return true;
          }
        }
        return false;
      }());
      // if vertical mode always make maxSlides and minSlides equal
      if (slider.settings.mode === 'vertical') { slider.settings.maxSlides = slider.settings.minSlides; }
      // save original style data
      el.data('origStyle', el.attr('style'));
      el.children(slider.settings.slideSelector).each(function() {
        $(this).data('origStyle', $(this).attr('style'));
      });

      // perform all DOM / CSS modifications
      setup();
    };

    /**
     * Performs all DOM and CSS modifications
     */
    var setup = function() {
      var preloadSelector = slider.children.eq(slider.settings.startSlide); // set the default preload selector (visible)

      // wrap el in a wrapper
      el.wrap('<div class="' + slider.settings.wrapperClass + '"><div class="bx-viewport"></div></div>');
      // store a namespace reference to .bx-viewport
      slider.viewport = el.parent();

      // add aria-live if the setting is enabled and ticker mode is disabled
      if (slider.settings.ariaLive && !slider.settings.ticker) {
        slider.viewport.attr('aria-live', 'polite');
      }
      // add a loading div to display while images are loading
      slider.loader = $('<div class="bx-loading" />');
      slider.viewport.prepend(slider.loader);
      // set el to a massive width, to hold any needed slides
      // also strip any margin and padding from el
      el.css({
        width: slider.settings.mode === 'horizontal' ? (slider.children.length * 1000 + 215) + '%' : 'auto',
        position: 'relative'
      });
      // if using CSS, add the easing property
      if (slider.usingCSS && slider.settings.easing) {
        el.css('-' + slider.cssPrefix + '-transition-timing-function', slider.settings.easing);
      // if not using CSS and no easing value was supplied, use the default JS animation easing (swing)
      } else if (!slider.settings.easing) {
        slider.settings.easing = 'swing';
      }
      // make modifications to the viewport (.bx-viewport)
      slider.viewport.css({
        width: '100%',
        overflow: 'hidden',
        position: 'relative'
      });
      slider.viewport.parent().css({
        maxWidth: getViewportMaxWidth()
      });
      // apply css to all slider children
      slider.children.css({
        float: slider.settings.mode === 'horizontal' ? 'left' : 'none',
        listStyle: 'none',
        position: 'relative'
      });
      // apply the calculated width after the float is applied to prevent scrollbar interference
      slider.children.css('width', getSlideWidth());
      // if slideMargin is supplied, add the css
      if (slider.settings.mode === 'horizontal' && slider.settings.slideMargin > 0) { slider.children.css('marginRight', slider.settings.slideMargin); }
      if (slider.settings.mode === 'vertical' && slider.settings.slideMargin > 0) { slider.children.css('marginBottom', slider.settings.slideMargin); }
      // if "fade" mode, add positioning and z-index CSS
      if (slider.settings.mode === 'fade') {
        slider.children.css({
          position: 'absolute',
          zIndex: 0,
          display: 'none'
        });
        // prepare the z-index on the showing element
        slider.children.eq(slider.settings.startSlide).css({zIndex: slider.settings.slideZIndex, display: 'block'});
      }
      // create an element to contain all slider controls (pager, start / stop, etc)
      slider.controls.el = $('<div class="bx-controls" />');
      // if captions are requested, add them
      if (slider.settings.captions) { appendCaptions(); }
      // check if startSlide is last slide
      slider.active.last = slider.settings.startSlide === getPagerQty() - 1;
      // if video is true, set up the fitVids plugin
      if (slider.settings.video) { el.fitVids(); }
      if (slider.settings.preloadImages === 'all' || slider.settings.ticker) { preloadSelector = slider.children; }
      // only check for control addition if not in "ticker" mode
      if (!slider.settings.ticker) {
        // if controls are requested, add them
        if (slider.settings.controls) { appendControls(); }
        // if auto is true, and auto controls are requested, add them
        if (slider.settings.auto && slider.settings.autoControls) { appendControlsAuto(); }
        // if pager is requested, add it
        if (slider.settings.pager) { appendPager(); }
        // if any control option is requested, add the controls wrapper
        if (slider.settings.controls || slider.settings.autoControls || slider.settings.pager) { slider.viewport.after(slider.controls.el); }
      // if ticker mode, do not allow a pager
      } else {
        slider.settings.pager = false;
      }
      loadElements(preloadSelector, start);
    };

    var loadElements = function(selector, callback) {
      var total = selector.find('img:not([src=""]), iframe').length,
      count = 0;
      if (total === 0) {
        callback();
        return;
      }
      selector.find('img:not([src=""]), iframe').each(function() {
        $(this).one('load error', function() {
          if (++count === total) { callback(); }
        }).each(function() {
          if (this.complete) { $(this).trigger('load'); }
        });
      });
    };

    /**
     * Start the slider
     */
    var start = function() {
      // if infinite loop, prepare additional slides
      if (slider.settings.infiniteLoop && slider.settings.mode !== 'fade' && !slider.settings.ticker) {
        var slice    = slider.settings.mode === 'vertical' ? slider.settings.minSlides : slider.settings.maxSlides,
        sliceAppend  = slider.children.slice(0, slice).clone(true).addClass('bx-clone'),
        slicePrepend = slider.children.slice(-slice).clone(true).addClass('bx-clone');
        if (slider.settings.ariaHidden) {
          sliceAppend.attr('aria-hidden', true);
          slicePrepend.attr('aria-hidden', true);
        }
        el.append(sliceAppend).prepend(slicePrepend);
      }
      // remove the loading DOM element
      slider.loader.remove();
      // set the left / top position of "el"
      setSlidePosition();
      // if "vertical" mode, always use adaptiveHeight to prevent odd behavior
      if (slider.settings.mode === 'vertical') { slider.settings.adaptiveHeight = true; }
      // set the viewport height
      slider.viewport.height(getViewportHeight());
      // make sure everything is positioned just right (same as a window resize)
      el.redrawSlider();
      // onSliderLoad callback
      slider.settings.onSliderLoad.call(el, slider.active.index);
      // slider has been fully initialized
      slider.initialized = true;
      // bind the resize call to the window
      if (slider.settings.responsive) { $(window).bind('resize', resizeWindow); }
      // if auto is true and has more than 1 page, start the show
      if (slider.settings.auto && slider.settings.autoStart && (getPagerQty() > 1 || slider.settings.autoSlideForOnePage)) { initAuto(); }
      // if ticker is true, start the ticker
      if (slider.settings.ticker) { initTicker(); }
      // if pager is requested, make the appropriate pager link active
      if (slider.settings.pager) { updatePagerActive(slider.settings.startSlide); }
      // check for any updates to the controls (like hideControlOnEnd updates)
      if (slider.settings.controls) { updateDirectionControls(); }
      // if touchEnabled is true, setup the touch events
      if (slider.settings.touchEnabled && !slider.settings.ticker) { initTouch(); }
      // if keyboardEnabled is true, setup the keyboard events
      if (slider.settings.keyboardEnabled && !slider.settings.ticker) {
        $(document).keydown(keyPress);
      }
    };

    /**
     * Returns the calculated height of the viewport, used to determine either adaptiveHeight or the maxHeight value
     */
    var getViewportHeight = function() {
      var height = 0;
      // first determine which children (slides) should be used in our height calculation
      var children = $();
      // if mode is not "vertical" and adaptiveHeight is false, include all children
      if (slider.settings.mode !== 'vertical' && !slider.settings.adaptiveHeight) {
        children = slider.children;
      } else {
        // if not carousel, return the single active child
        if (!slider.carousel) {
          children = slider.children.eq(slider.active.index);
        // if carousel, return a slice of children
        } else {
          // get the individual slide index
          var currentIndex = slider.settings.moveSlides === 1 ? slider.active.index : slider.active.index * getMoveBy();
          // add the current slide to the children
          children = slider.children.eq(currentIndex);
          // cycle through the remaining "showing" slides
          for (i = 1; i <= slider.settings.maxSlides - 1; i++) {
            // if looped back to the start
            if (currentIndex + i >= slider.children.length) {
              children = children.add(slider.children.eq(i - 1));
            } else {
              children = children.add(slider.children.eq(currentIndex + i));
            }
          }
        }
      }
      // if "vertical" mode, calculate the sum of the heights of the children
      if (slider.settings.mode === 'vertical') {
        children.each(function(index) {
          height += $(this).outerHeight();
        });
        // add user-supplied margins
        if (slider.settings.slideMargin > 0) {
          height += slider.settings.slideMargin * (slider.settings.minSlides - 1);
        }
      // if not "vertical" mode, calculate the max height of the children
      } else {
        height = Math.max.apply(Math, children.map(function() {
          return $(this).outerHeight(false);
        }).get());
      }

      if (slider.viewport.css('box-sizing') === 'border-box') {
        height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom')) +
              parseFloat(slider.viewport.css('border-top-width')) + parseFloat(slider.viewport.css('border-bottom-width'));
      } else if (slider.viewport.css('box-sizing') === 'padding-box') {
        height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom'));
      }

      return height;
    };

    /**
     * Returns the calculated width to be used for the outer wrapper / viewport
     */
    var getViewportMaxWidth = function() {
      var width = '100%';
      if (slider.settings.slideWidth > 0) {
        if (slider.settings.mode === 'horizontal') {
          width = (slider.settings.maxSlides * slider.settings.slideWidth) + ((slider.settings.maxSlides - 1) * slider.settings.slideMargin);
        } else {
          width = slider.settings.slideWidth;
        }
      }
      return width;
    };

    /**
     * Returns the calculated width to be applied to each slide
     */
    var getSlideWidth = function() {
      var newElWidth = slider.settings.slideWidth, // start with any user-supplied slide width
      wrapWidth      = slider.viewport.width();    // get the current viewport width
      // if slide width was not supplied, or is larger than the viewport use the viewport width
      if (slider.settings.slideWidth === 0 ||
        (slider.settings.slideWidth > wrapWidth && !slider.carousel) ||
        slider.settings.mode === 'vertical') {
        newElWidth = wrapWidth;
      // if carousel, use the thresholds to determine the width
      } else if (slider.settings.maxSlides > 1 && slider.settings.mode === 'horizontal') {
        if (wrapWidth > slider.maxThreshold) {
          return newElWidth;
        } else if (wrapWidth < slider.minThreshold) {
          newElWidth = (wrapWidth - (slider.settings.slideMargin * (slider.settings.minSlides - 1))) / slider.settings.minSlides;
        } else if (slider.settings.shrinkItems) {
          newElWidth = Math.floor((wrapWidth + slider.settings.slideMargin) / (Math.ceil((wrapWidth + slider.settings.slideMargin) / (newElWidth + slider.settings.slideMargin))) - slider.settings.slideMargin);
        }
      }
      return newElWidth;
    };

    /**
     * Returns the number of slides currently visible in the viewport (includes partially visible slides)
     */
    var getNumberSlidesShowing = function() {
      var slidesShowing = 1,
      childWidth = null;
      if (slider.settings.mode === 'horizontal' && slider.settings.slideWidth > 0) {
        // if viewport is smaller than minThreshold, return minSlides
        if (slider.viewport.width() < slider.minThreshold) {
          slidesShowing = slider.settings.minSlides;
        // if viewport is larger than maxThreshold, return maxSlides
        } else if (slider.viewport.width() > slider.maxThreshold) {
          slidesShowing = slider.settings.maxSlides;
        // if viewport is between min / max thresholds, divide viewport width by first child width
        } else {
          childWidth = slider.children.first().width() + slider.settings.slideMargin;
          slidesShowing = Math.floor((slider.viewport.width() +
            slider.settings.slideMargin) / childWidth);
        }
      // if "vertical" mode, slides showing will always be minSlides
      } else if (slider.settings.mode === 'vertical') {
        slidesShowing = slider.settings.minSlides;
      }
      return slidesShowing;
    };

    /**
     * Returns the number of pages (one full viewport of slides is one "page")
     */
    var getPagerQty = function() {
      var pagerQty = 0,
      breakPoint = 0,
      counter = 0;
      // if moveSlides is specified by the user
      if (slider.settings.moveSlides > 0) {
        if (slider.settings.infiniteLoop) {
          pagerQty = Math.ceil(slider.children.length / getMoveBy());
        } else {
          // when breakpoint goes above children length, counter is the number of pages
          while (breakPoint < slider.children.length) {
            ++pagerQty;
            breakPoint = counter + getNumberSlidesShowing();
            counter += slider.settings.moveSlides <= getNumberSlidesShowing() ? slider.settings.moveSlides : getNumberSlidesShowing();
          }
        }
      // if moveSlides is 0 (auto) divide children length by sides showing, then round up
      } else {
        pagerQty = Math.ceil(slider.children.length / getNumberSlidesShowing());
      }
      return pagerQty;
    };

    /**
     * Returns the number of individual slides by which to shift the slider
     */
    var getMoveBy = function() {
      // if moveSlides was set by the user and moveSlides is less than number of slides showing
      if (slider.settings.moveSlides > 0 && slider.settings.moveSlides <= getNumberSlidesShowing()) {
        return slider.settings.moveSlides;
      }
      // if moveSlides is 0 (auto)
      return getNumberSlidesShowing();
    };

    /**
     * Sets the slider's (el) left or top position
     */
    var setSlidePosition = function() {
      var position, lastChild, lastShowingIndex;
      // if last slide, not infinite loop, and number of children is larger than specified maxSlides
      if (slider.children.length > slider.settings.maxSlides && slider.active.last && !slider.settings.infiniteLoop) {
        if (slider.settings.mode === 'horizontal') {
          // get the last child's position
          lastChild = slider.children.last();
          position = lastChild.position();
          // set the left position
          setPositionProperty(-(position.left - (slider.viewport.width() - lastChild.outerWidth())), 'reset', 0);
        } else if (slider.settings.mode === 'vertical') {
          // get the last showing index's position
          lastShowingIndex = slider.children.length - slider.settings.minSlides;
          position = slider.children.eq(lastShowingIndex).position();
          // set the top position
          setPositionProperty(-position.top, 'reset', 0);
        }
      // if not last slide
      } else {
        // get the position of the first showing slide
        position = slider.children.eq(slider.active.index * getMoveBy()).position();
        // check for last slide
        if (slider.active.index === getPagerQty() - 1) { slider.active.last = true; }
        // set the respective position
        if (position !== undefined) {
          if (slider.settings.mode === 'horizontal') { setPositionProperty(-position.left, 'reset', 0); }
          else if (slider.settings.mode === 'vertical') { setPositionProperty(-position.top, 'reset', 0); }
        }
      }
    };

    /**
     * Sets the el's animating property position (which in turn will sometimes animate el).
     * If using CSS, sets the transform property. If not using CSS, sets the top / left property.
     *
     * @param value (int)
     *  - the animating property's value
     *
     * @param type (string) 'slide', 'reset', 'ticker'
     *  - the type of instance for which the function is being
     *
     * @param duration (int)
     *  - the amount of time (in ms) the transition should occupy
     *
     * @param params (array) optional
     *  - an optional parameter containing any variables that need to be passed in
     */
    var setPositionProperty = function(value, type, duration, params) {
      var animateObj, propValue;
      // use CSS transform
      if (slider.usingCSS) {
        // determine the translate3d value
        propValue = slider.settings.mode === 'vertical' ? 'translate3d(0, ' + value + 'px, 0)' : 'translate3d(' + value + 'px, 0, 0)';
        // add the CSS transition-duration
        el.css('-' + slider.cssPrefix + '-transition-duration', duration / 1000 + 's');
        if (type === 'slide') {
          // set the property value
          el.css(slider.animProp, propValue);
          if (duration !== 0) {
            // bind a callback method - executes when CSS transition completes
            el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function(e) {
              //make sure it's the correct one
              if (!$(e.target).is(el)) { return; }
              // unbind the callback
              el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');
              updateAfterSlideTransition();
            });
          } else { //duration = 0
            updateAfterSlideTransition();
          }
        } else if (type === 'reset') {
          el.css(slider.animProp, propValue);
        } else if (type === 'ticker') {
          // make the transition use 'linear'
          el.css('-' + slider.cssPrefix + '-transition-timing-function', 'linear');
          el.css(slider.animProp, propValue);
          if (duration !== 0) {
            el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function(e) {
              //make sure it's the correct one
              if (!$(e.target).is(el)) { return; }
              // unbind the callback
              el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');
              // reset the position
              setPositionProperty(params.resetValue, 'reset', 0);
              // start the loop again
              tickerLoop();
            });
          } else { //duration = 0
            setPositionProperty(params.resetValue, 'reset', 0);
            tickerLoop();
          }
        }
      // use JS animate
      } else {
        animateObj = {};
        animateObj[slider.animProp] = value;
        if (type === 'slide') {
          el.animate(animateObj, duration, slider.settings.easing, function() {
            updateAfterSlideTransition();
          });
        } else if (type === 'reset') {
          el.css(slider.animProp, value);
        } else if (type === 'ticker') {
          el.animate(animateObj, duration, 'linear', function() {
            setPositionProperty(params.resetValue, 'reset', 0);
            // run the recursive loop after animation
            tickerLoop();
          });
        }
      }
    };

    /**
     * Populates the pager with proper amount of pages
     */
    var populatePager = function() {
      var pagerHtml = '',
      linkContent = '',
      pagerQty = getPagerQty();
      // loop through each pager item
      for (var i = 0; i < pagerQty; i++) {
        linkContent = '';
        // if a buildPager function is supplied, use it to get pager link value, else use index + 1
        if (slider.settings.buildPager && $.isFunction(slider.settings.buildPager) || slider.settings.pagerCustom) {
          linkContent = slider.settings.buildPager(i);
          slider.pagerEl.addClass('bx-custom-pager');
        } else {
          linkContent = i + 1;
          slider.pagerEl.addClass('bx-default-pager');
        }
        // var linkContent = slider.settings.buildPager && $.isFunction(slider.settings.buildPager) ? slider.settings.buildPager(i) : i + 1;
        // add the markup to the string
        pagerHtml += '<div class="bx-pager-item"><a href="" data-slide-index="' + i + '" class="bx-pager-link">' + linkContent + '</a></div>';
      }
      // populate the pager element with pager links
      slider.pagerEl.html(pagerHtml);
    };

    /**
     * Appends the pager to the controls element
     */
    var appendPager = function() {
      if (!slider.settings.pagerCustom) {
        // create the pager DOM element
        slider.pagerEl = $('<div class="bx-pager" />');
        // if a pager selector was supplied, populate it with the pager
        if (slider.settings.pagerSelector) {
          $(slider.settings.pagerSelector).html(slider.pagerEl);
        // if no pager selector was supplied, add it after the wrapper
        } else {
          slider.controls.el.addClass('bx-has-pager').append(slider.pagerEl);
        }
        // populate the pager
        populatePager();
      } else {
        slider.pagerEl = $(slider.settings.pagerCustom);
      }
      // assign the pager click binding
      slider.pagerEl.on('click touchend', 'a', clickPagerBind);
    };

    /**
     * Appends prev / next controls to the controls element
     */
    var appendControls = function() {
      slider.controls.next = $('<a class="bx-next" href="">' + slider.settings.nextText + '</a>');
      slider.controls.prev = $('<a class="bx-prev" href="">' + slider.settings.prevText + '</a>');
      // bind click actions to the controls
      slider.controls.next.bind('click touchend', clickNextBind);
      slider.controls.prev.bind('click touchend', clickPrevBind);
      // if nextSelector was supplied, populate it
      if (slider.settings.nextSelector) {
        $(slider.settings.nextSelector).append(slider.controls.next);
      }
      // if prevSelector was supplied, populate it
      if (slider.settings.prevSelector) {
        $(slider.settings.prevSelector).append(slider.controls.prev);
      }
      // if no custom selectors were supplied
      if (!slider.settings.nextSelector && !slider.settings.prevSelector) {
        // add the controls to the DOM
        slider.controls.directionEl = $('<div class="bx-controls-direction" />');
        // add the control elements to the directionEl
        slider.controls.directionEl.append(slider.controls.prev).append(slider.controls.next);
        // slider.viewport.append(slider.controls.directionEl);
        slider.controls.el.addClass('bx-has-controls-direction').append(slider.controls.directionEl);
      }
    };

    /**
     * Appends start / stop auto controls to the controls element
     */
    var appendControlsAuto = function() {
      slider.controls.start = $('<div class="bx-controls-auto-item"><a class="bx-start" href="">' + slider.settings.startText + '</a></div>');
      slider.controls.stop = $('<div class="bx-controls-auto-item"><a class="bx-stop" href="">' + slider.settings.stopText + '</a></div>');
      // add the controls to the DOM
      slider.controls.autoEl = $('<div class="bx-controls-auto" />');
      // bind click actions to the controls
      slider.controls.autoEl.on('click', '.bx-start', clickStartBind);
      slider.controls.autoEl.on('click', '.bx-stop', clickStopBind);
      // if autoControlsCombine, insert only the "start" control
      if (slider.settings.autoControlsCombine) {
        slider.controls.autoEl.append(slider.controls.start);
      // if autoControlsCombine is false, insert both controls
      } else {
        slider.controls.autoEl.append(slider.controls.start).append(slider.controls.stop);
      }
      // if auto controls selector was supplied, populate it with the controls
      if (slider.settings.autoControlsSelector) {
        $(slider.settings.autoControlsSelector).html(slider.controls.autoEl);
      // if auto controls selector was not supplied, add it after the wrapper
      } else {
        slider.controls.el.addClass('bx-has-controls-auto').append(slider.controls.autoEl);
      }
      // update the auto controls
      updateAutoControls(slider.settings.autoStart ? 'stop' : 'start');
    };

    /**
     * Appends image captions to the DOM
     */
    var appendCaptions = function() {
      // cycle through each child
      slider.children.each(function(index) {
        // get the image title attribute
        var title = $(this).find('img:first').attr('title');
        // append the caption
        if (title !== undefined && ('' + title).length) {
          $(this).append('<div class="bx-caption"><span>' + title + '</span></div>');
        }
      });
    };

    /**
     * Click next binding
     *
     * @param e (event)
     *  - DOM event object
     */
    var clickNextBind = function(e) {
      e.preventDefault();
      if (slider.controls.el.hasClass('disabled')) { return; }
      // if auto show is running, stop it
      if (slider.settings.auto && slider.settings.stopAutoOnClick) { el.stopAuto(); }
      el.goToNextSlide();
    };

    /**
     * Click prev binding
     *
     * @param e (event)
     *  - DOM event object
     */
    var clickPrevBind = function(e) {
      e.preventDefault();
      if (slider.controls.el.hasClass('disabled')) { return; }
      // if auto show is running, stop it
      if (slider.settings.auto && slider.settings.stopAutoOnClick) { el.stopAuto(); }
      el.goToPrevSlide();
    };

    /**
     * Click start binding
     *
     * @param e (event)
     *  - DOM event object
     */
    var clickStartBind = function(e) {
      el.startAuto();
      e.preventDefault();
    };

    /**
     * Click stop binding
     *
     * @param e (event)
     *  - DOM event object
     */
    var clickStopBind = function(e) {
      el.stopAuto();
      e.preventDefault();
    };

    /**
     * Click pager binding
     *
     * @param e (event)
     *  - DOM event object
     */
    var clickPagerBind = function(e) {
      var pagerLink, pagerIndex;
      e.preventDefault();
      if (slider.controls.el.hasClass('disabled')) {
        return;
      }
      // if auto show is running, stop it
      if (slider.settings.auto  && slider.settings.stopAutoOnClick) { el.stopAuto(); }
      pagerLink = $(e.currentTarget);
      if (pagerLink.attr('data-slide-index') !== undefined) {
        pagerIndex = parseInt(pagerLink.attr('data-slide-index'));
        // if clicked pager link is not active, continue with the goToSlide call
        if (pagerIndex !== slider.active.index) { el.goToSlide(pagerIndex); }
      }
    };

    /**
     * Updates the pager links with an active class
     *
     * @param slideIndex (int)
     *  - index of slide to make active
     */
    var updatePagerActive = function(slideIndex) {
      // if "short" pager type
      var len = slider.children.length; // nb of children
      if (slider.settings.pagerType === 'short') {
        if (slider.settings.maxSlides > 1) {
          len = Math.ceil(slider.children.length / slider.settings.maxSlides);
        }
        slider.pagerEl.html((slideIndex + 1) + slider.settings.pagerShortSeparator + len);
        return;
      }
      // remove all pager active classes
      slider.pagerEl.find('a').removeClass('active');
      // apply the active class for all pagers
      slider.pagerEl.each(function(i, el) { $(el).find('a').eq(slideIndex).addClass('active'); });
    };

    /**
     * Performs needed actions after a slide transition
     */
    var updateAfterSlideTransition = function() {
      // if infinite loop is true
      if (slider.settings.infiniteLoop) {
        var position = '';
        // first slide
        if (slider.active.index === 0) {
          // set the new position
          position = slider.children.eq(0).position();
        // carousel, last slide
        } else if (slider.active.index === getPagerQty() - 1 && slider.carousel) {
          position = slider.children.eq((getPagerQty() - 1) * getMoveBy()).position();
        // last slide
        } else if (slider.active.index === slider.children.length - 1) {
          position = slider.children.eq(slider.children.length - 1).position();
        }
        if (position) {
          if (slider.settings.mode === 'horizontal') { setPositionProperty(-position.left, 'reset', 0); }
          else if (slider.settings.mode === 'vertical') { setPositionProperty(-position.top, 'reset', 0); }
        }
      }
      // declare that the transition is complete
      slider.working = false;
      // onSlideAfter callback
      slider.settings.onSlideAfter.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
    };

    /**
     * Updates the auto controls state (either active, or combined switch)
     *
     * @param state (string) "start", "stop"
     *  - the new state of the auto show
     */
    var updateAutoControls = function(state) {
      // if autoControlsCombine is true, replace the current control with the new state
      if (slider.settings.autoControlsCombine) {
        slider.controls.autoEl.html(slider.controls[state]);
      // if autoControlsCombine is false, apply the "active" class to the appropriate control
      } else {
        slider.controls.autoEl.find('a').removeClass('active');
        slider.controls.autoEl.find('a:not(.bx-' + state + ')').addClass('active');
      }
    };

    /**
     * Updates the direction controls (checks if either should be hidden)
     */
    var updateDirectionControls = function() {
      if (getPagerQty() === 1) {
        slider.controls.prev.addClass('disabled');
        slider.controls.next.addClass('disabled');
      } else if (!slider.settings.infiniteLoop && slider.settings.hideControlOnEnd) {
        // if first slide
        if (slider.active.index === 0) {
          slider.controls.prev.addClass('disabled');
          slider.controls.next.removeClass('disabled');
        // if last slide
        } else if (slider.active.index === getPagerQty() - 1) {
          slider.controls.next.addClass('disabled');
          slider.controls.prev.removeClass('disabled');
        // if any slide in the middle
        } else {
          slider.controls.prev.removeClass('disabled');
          slider.controls.next.removeClass('disabled');
        }
      }
    };

    /**
     * Initializes the auto process
     */
    var initAuto = function() {
      // if autoDelay was supplied, launch the auto show using a setTimeout() call
      if (slider.settings.autoDelay > 0) {
        var timeout = setTimeout(el.startAuto, slider.settings.autoDelay);
      // if autoDelay was not supplied, start the auto show normally
      } else {
        el.startAuto();

        //add focus and blur events to ensure its running if timeout gets paused
        $(window).focus(function() {
          el.startAuto();
        }).blur(function() {
          el.stopAuto();
        });
      }
      // if autoHover is requested
      if (slider.settings.autoHover) {
        // on el hover
        el.hover(function() {
          // if the auto show is currently playing (has an active interval)
          if (slider.interval) {
            // stop the auto show and pass true argument which will prevent control update
            el.stopAuto(true);
            // create a new autoPaused value which will be used by the relative "mouseout" event
            slider.autoPaused = true;
          }
        }, function() {
          // if the autoPaused value was created be the prior "mouseover" event
          if (slider.autoPaused) {
            // start the auto show and pass true argument which will prevent control update
            el.startAuto(true);
            // reset the autoPaused value
            slider.autoPaused = null;
          }
        });
      }
    };

    /**
     * Initializes the ticker process
     */
    var initTicker = function() {
      var startPosition = 0,
      position, transform, value, idx, ratio, property, newSpeed, totalDimens;
      // if autoDirection is "next", append a clone of the entire slider
      if (slider.settings.autoDirection === 'next') {
        el.append(slider.children.clone().addClass('bx-clone'));
      // if autoDirection is "prev", prepend a clone of the entire slider, and set the left position
      } else {
        el.prepend(slider.children.clone().addClass('bx-clone'));
        position = slider.children.first().position();
        startPosition = slider.settings.mode === 'horizontal' ? -position.left : -position.top;
      }
      setPositionProperty(startPosition, 'reset', 0);
      // do not allow controls in ticker mode
      slider.settings.pager = false;
      slider.settings.controls = false;
      slider.settings.autoControls = false;
      // if autoHover is requested
      if (slider.settings.tickerHover) {
        if (slider.usingCSS) {
          idx = slider.settings.mode === 'horizontal' ? 4 : 5;
          slider.viewport.hover(function() {
            transform = el.css('-' + slider.cssPrefix + '-transform');
            value = parseFloat(transform.split(',')[idx]);
            setPositionProperty(value, 'reset', 0);
          }, function() {
            totalDimens = 0;
            slider.children.each(function(index) {
              totalDimens += slider.settings.mode === 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true);
            });
            // calculate the speed ratio (used to determine the new speed to finish the paused animation)
            ratio = slider.settings.speed / totalDimens;
            // determine which property to use
            property = slider.settings.mode === 'horizontal' ? 'left' : 'top';
            // calculate the new speed
            newSpeed = ratio * (totalDimens - (Math.abs(parseInt(value))));
            tickerLoop(newSpeed);
          });
        } else {
          // on el hover
          slider.viewport.hover(function() {
            el.stop();
          }, function() {
            // calculate the total width of children (used to calculate the speed ratio)
            totalDimens = 0;
            slider.children.each(function(index) {
              totalDimens += slider.settings.mode === 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true);
            });
            // calculate the speed ratio (used to determine the new speed to finish the paused animation)
            ratio = slider.settings.speed / totalDimens;
            // determine which property to use
            property = slider.settings.mode === 'horizontal' ? 'left' : 'top';
            // calculate the new speed
            newSpeed = ratio * (totalDimens - (Math.abs(parseInt(el.css(property)))));
            tickerLoop(newSpeed);
          });
        }
      }
      // start the ticker loop
      tickerLoop();
    };

    /**
     * Runs a continuous loop, news ticker-style
     */
    var tickerLoop = function(resumeSpeed) {
      var speed = resumeSpeed ? resumeSpeed : slider.settings.speed,
      position = {left: 0, top: 0},
      reset = {left: 0, top: 0},
      animateProperty, resetValue, params;

      // if "next" animate left position to last child, then reset left to 0
      if (slider.settings.autoDirection === 'next') {
        position = el.find('.bx-clone').first().position();
      // if "prev" animate left position to 0, then reset left to first non-clone child
      } else {
        reset = slider.children.first().position();
      }
      animateProperty = slider.settings.mode === 'horizontal' ? -position.left : -position.top;
      resetValue = slider.settings.mode === 'horizontal' ? -reset.left : -reset.top;
      params = {resetValue: resetValue};
      setPositionProperty(animateProperty, 'ticker', speed, params);
    };

    /**
     * Check if el is on screen
     */
    var isOnScreen = function(el) {
      var win = $(window),
      viewport = {
        top: win.scrollTop(),
        left: win.scrollLeft()
      },
      bounds = el.offset();

      viewport.right = viewport.left + win.width();
      viewport.bottom = viewport.top + win.height();
      bounds.right = bounds.left + el.outerWidth();
      bounds.bottom = bounds.top + el.outerHeight();

      return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));
    };

    /**
     * Initializes keyboard events
     */
    var keyPress = function(e) {
      var activeElementTag = document.activeElement.tagName.toLowerCase(),
      tagFilters = 'input|textarea',
      p = new RegExp(activeElementTag,['i']),
      result = p.exec(tagFilters);

      if (result == null && isOnScreen(el)) {
        if (e.keyCode === 39) {
          clickNextBind(e);
          return false;
        } else if (e.keyCode === 37) {
          clickPrevBind(e);
          return false;
        }
      }
    };

    /**
     * Initializes touch events
     */
    var initTouch = function() {
      // initialize object to contain all touch values
      slider.touch = {
        start: {x: 0, y: 0},
        end: {x: 0, y: 0}
      };
      slider.viewport.bind('touchstart MSPointerDown pointerdown', onTouchStart);

      //for browsers that have implemented pointer events and fire a click after
      //every pointerup regardless of whether pointerup is on same screen location as pointerdown or not
      slider.viewport.on('click', '.bxslider a', function(e) {
        if (slider.viewport.hasClass('click-disabled')) {
          e.preventDefault();
          slider.viewport.removeClass('click-disabled');
        }
      });
    };

    /**
     * Event handler for "touchstart"
     *
     * @param e (event)
     *  - DOM event object
     */
    var onTouchStart = function(e) {
      //disable slider controls while user is interacting with slides to avoid slider freeze that happens on touch devices when a slide swipe happens immediately after interacting with slider controls
      slider.controls.el.addClass('disabled');

      if (slider.working) {
        e.preventDefault();
        slider.controls.el.removeClass('disabled');
      } else {
        // record the original position when touch starts
        slider.touch.originalPos = el.position();
        var orig = e.originalEvent,
        touchPoints = (typeof orig.changedTouches !== 'undefined') ? orig.changedTouches : [orig];
        // record the starting touch x, y coordinates
        slider.touch.start.x = touchPoints[0].pageX;
        slider.touch.start.y = touchPoints[0].pageY;

        if (slider.viewport.get(0).setPointerCapture) {
          slider.pointerId = orig.pointerId;
          slider.viewport.get(0).setPointerCapture(slider.pointerId);
        }
        // bind a "touchmove" event to the viewport
        slider.viewport.bind('touchmove MSPointerMove pointermove', onTouchMove);
        // bind a "touchend" event to the viewport
        slider.viewport.bind('touchend MSPointerUp pointerup', onTouchEnd);
        slider.viewport.bind('MSPointerCancel pointercancel', onPointerCancel);
      }
    };

    /**
     * Cancel Pointer for Windows Phone
     *
     * @param e (event)
     *  - DOM event object
     */
    var onPointerCancel = function(e) {
      /* onPointerCancel handler is needed to deal with situations when a touchend
      doesn't fire after a touchstart (this happens on windows phones only) */
      setPositionProperty(slider.touch.originalPos.left, 'reset', 0);

      //remove handlers
      slider.controls.el.removeClass('disabled');
      slider.viewport.unbind('MSPointerCancel pointercancel', onPointerCancel);
      slider.viewport.unbind('touchmove MSPointerMove pointermove', onTouchMove);
      slider.viewport.unbind('touchend MSPointerUp pointerup', onTouchEnd);
      if (slider.viewport.get(0).releasePointerCapture) {
        slider.viewport.get(0).releasePointerCapture(slider.pointerId);
      }
    };

    /**
     * Event handler for "touchmove"
     *
     * @param e (event)
     *  - DOM event object
     */
    var onTouchMove = function(e) {
      var orig = e.originalEvent,
      touchPoints = (typeof orig.changedTouches !== 'undefined') ? orig.changedTouches : [orig],
      // if scrolling on y axis, do not prevent default
      xMovement = Math.abs(touchPoints[0].pageX - slider.touch.start.x),
      yMovement = Math.abs(touchPoints[0].pageY - slider.touch.start.y),
      value = 0,
      change = 0;

      // x axis swipe
      if ((xMovement * 3) > yMovement && slider.settings.preventDefaultSwipeX) {
        e.preventDefault();
      // y axis swipe
      } else if ((yMovement * 3) > xMovement && slider.settings.preventDefaultSwipeY) {
        e.preventDefault();
      }
      if (slider.settings.mode !== 'fade' && slider.settings.oneToOneTouch) {
        // if horizontal, drag along x axis
        if (slider.settings.mode === 'horizontal') {
          change = touchPoints[0].pageX - slider.touch.start.x;
          value = slider.touch.originalPos.left + change;
        // if vertical, drag along y axis
        } else {
          change = touchPoints[0].pageY - slider.touch.start.y;
          value = slider.touch.originalPos.top + change;
        }
        setPositionProperty(value, 'reset', 0);
      }
    };

    /**
     * Event handler for "touchend"
     *
     * @param e (event)
     *  - DOM event object
     */
    var onTouchEnd = function(e) {
      slider.viewport.unbind('touchmove MSPointerMove pointermove', onTouchMove);
      //enable slider controls as soon as user stops interacing with slides
      slider.controls.el.removeClass('disabled');
      var orig    = e.originalEvent,
      touchPoints = (typeof orig.changedTouches !== 'undefined') ? orig.changedTouches : [orig],
      value       = 0,
      distance    = 0;
      // record end x, y positions
      slider.touch.end.x = touchPoints[0].pageX;
      slider.touch.end.y = touchPoints[0].pageY;
      // if fade mode, check if absolute x distance clears the threshold
      if (slider.settings.mode === 'fade') {
        distance = Math.abs(slider.touch.start.x - slider.touch.end.x);
        if (distance >= slider.settings.swipeThreshold) {
          if (slider.touch.start.x > slider.touch.end.x) {
            el.goToNextSlide();
          } else {
            el.goToPrevSlide();
          }
          el.stopAuto();
        }
      // not fade mode
      } else {
        // calculate distance and el's animate property
        if (slider.settings.mode === 'horizontal') {
          distance = slider.touch.end.x - slider.touch.start.x;
          value = slider.touch.originalPos.left;
        } else {
          distance = slider.touch.end.y - slider.touch.start.y;
          value = slider.touch.originalPos.top;
        }
        // if not infinite loop and first / last slide, do not attempt a slide transition
        if (!slider.settings.infiniteLoop && ((slider.active.index === 0 && distance > 0) || (slider.active.last && distance < 0))) {
          setPositionProperty(value, 'reset', 200);
        } else {
          // check if distance clears threshold
          if (Math.abs(distance) >= slider.settings.swipeThreshold) {
            if (distance < 0) {
              el.goToNextSlide();
            } else {
              el.goToPrevSlide();
            }
            el.stopAuto();
          } else {
            // el.animate(property, 200);
            setPositionProperty(value, 'reset', 200);
          }
        }
      }
      slider.viewport.unbind('touchend MSPointerUp pointerup', onTouchEnd);
      if (slider.viewport.get(0).releasePointerCapture) {
        slider.viewport.get(0).releasePointerCapture(slider.pointerId);
      }
    };

    /**
     * Window resize event callback
     */
    var resizeWindow = function(e) {
      // don't do anything if slider isn't initialized.
      if (!slider.initialized) { return; }
      // Delay if slider working.
      if (slider.working) {
        window.setTimeout(resizeWindow, 10);
      } else {
        // get the new window dimens (again, thank you IE)
        var windowWidthNew = $(window).width(),
        windowHeightNew = $(window).height();
        // make sure that it is a true window resize
        // *we must check this because our dinosaur friend IE fires a window resize event when certain DOM elements
        // are resized. Can you just die already?*
        if (windowWidth !== windowWidthNew || windowHeight !== windowHeightNew) {
          // set the new window dimens
          windowWidth = windowWidthNew;
          windowHeight = windowHeightNew;
          // update all dynamic elements
          el.redrawSlider();
          // Call user resize handler
          slider.settings.onSliderResize.call(el, slider.active.index);
        }
      }
    };

    /**
     * Adds an aria-hidden=true attribute to each element
     *
     * @param startVisibleIndex (int)
     *  - the first visible element's index
     */
    var applyAriaHiddenAttributes = function(startVisibleIndex) {
      var numberOfSlidesShowing = getNumberSlidesShowing();
      // only apply attributes if the setting is enabled and not in ticker mode
      if (slider.settings.ariaHidden && !slider.settings.ticker) {
        // add aria-hidden=true to all elements
        slider.children.attr('aria-hidden', 'true');
        // get the visible elements and change to aria-hidden=false
        slider.children.slice(startVisibleIndex, startVisibleIndex + numberOfSlidesShowing).attr('aria-hidden', 'false');
      }
    };

    /**
     * Returns index according to present page range
     *
     * @param slideOndex (int)
     *  - the desired slide index
     */
    var setSlideIndex = function(slideIndex) {
      if (slideIndex < 0) {
        if (slider.settings.infiniteLoop) {
          return getPagerQty() - 1;
        }else {
          //we don't go to undefined slides
          return slider.active.index;
        }
      // if slideIndex is greater than children length, set active index to 0 (this happens during infinite loop)
      } else if (slideIndex >= getPagerQty()) {
        if (slider.settings.infiniteLoop) {
          return 0;
        } else {
          //we don't move to undefined pages
          return slider.active.index;
        }
      // set active index to requested slide
      } else {
        return slideIndex;
      }
    };

    /**
     * ===================================================================================
     * = PUBLIC FUNCTIONS
     * ===================================================================================
     */

    /**
     * Performs slide transition to the specified slide
     *
     * @param slideIndex (int)
     *  - the destination slide's index (zero-based)
     *
     * @param direction (string)
     *  - INTERNAL USE ONLY - the direction of travel ("prev" / "next")
     */
    el.goToSlide = function(slideIndex, direction) {
      // onSlideBefore, onSlideNext, onSlidePrev callbacks
      // Allow transition canceling based on returned value
      var performTransition = true,
      moveBy = 0,
      position = {left: 0, top: 0},
      lastChild = null,
      lastShowingIndex, eq, value, requestEl;
      // store the old index
      slider.oldIndex = slider.active.index;
      //set new index
      slider.active.index = setSlideIndex(slideIndex);

      // if plugin is currently in motion, ignore request
      if (slider.working || slider.active.index === slider.oldIndex) { return; }
      // declare that plugin is in motion
      slider.working = true;

      performTransition = slider.settings.onSlideBefore.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);

      // If transitions canceled, reset and return
      if (typeof (performTransition) !== 'undefined' && !performTransition) {
        slider.active.index = slider.oldIndex; // restore old index
        slider.working = false; // is not in motion
        return;
      }

      if (direction === 'next') {
        // Prevent canceling in future functions or lack there-of from negating previous commands to cancel
        if (!slider.settings.onSlideNext.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)) {
          performTransition = false;
        }
      } else if (direction === 'prev') {
        // Prevent canceling in future functions or lack there-of from negating previous commands to cancel
        if (!slider.settings.onSlidePrev.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)) {
          performTransition = false;
        }
      }

      // check if last slide
      slider.active.last = slider.active.index >= getPagerQty() - 1;
      // update the pager with active class
      if (slider.settings.pager || slider.settings.pagerCustom) { updatePagerActive(slider.active.index); }
      // // check for direction control update
      if (slider.settings.controls) { updateDirectionControls(); }
      // if slider is set to mode: "fade"
      if (slider.settings.mode === 'fade') {
        // if adaptiveHeight is true and next height is different from current height, animate to the new height
        if (slider.settings.adaptiveHeight && slider.viewport.height() !== getViewportHeight()) {
          slider.viewport.animate({height: getViewportHeight()}, slider.settings.adaptiveHeightSpeed);
        }
        // fade out the visible child and reset its z-index value
        slider.children.filter(':visible').fadeOut(slider.settings.speed).css({zIndex: 0});
        // fade in the newly requested slide
        slider.children.eq(slider.active.index).css('zIndex', slider.settings.slideZIndex + 1).fadeIn(slider.settings.speed, function() {
          $(this).css('zIndex', slider.settings.slideZIndex);
          updateAfterSlideTransition();
        });
      // slider mode is not "fade"
      } else {
        // if adaptiveHeight is true and next height is different from current height, animate to the new height
        if (slider.settings.adaptiveHeight && slider.viewport.height() !== getViewportHeight()) {
          slider.viewport.animate({height: getViewportHeight()}, slider.settings.adaptiveHeightSpeed);
        }
        // if carousel and not infinite loop
        if (!slider.settings.infiniteLoop && slider.carousel && slider.active.last) {
          if (slider.settings.mode === 'horizontal') {
            // get the last child position
            lastChild = slider.children.eq(slider.children.length - 1);
            position = lastChild.position();
            // calculate the position of the last slide
            moveBy = slider.viewport.width() - lastChild.outerWidth();
          } else {
            // get last showing index position
            lastShowingIndex = slider.children.length - slider.settings.minSlides;
            position = slider.children.eq(lastShowingIndex).position();
          }
          // horizontal carousel, going previous while on first slide (infiniteLoop mode)
        } else if (slider.carousel && slider.active.last && direction === 'prev') {
          // get the last child position
          eq = slider.settings.moveSlides === 1 ? slider.settings.maxSlides - getMoveBy() : ((getPagerQty() - 1) * getMoveBy()) - (slider.children.length - slider.settings.maxSlides);
          lastChild = el.children('.bx-clone').eq(eq);
          position = lastChild.position();
        // if infinite loop and "Next" is clicked on the last slide
        } else if (direction === 'next' && slider.active.index === 0) {
          // get the last clone position
          position = el.find('> .bx-clone').eq(slider.settings.maxSlides).position();
          slider.active.last = false;
        // normal non-zero requests
        } else if (slideIndex >= 0) {
          //parseInt is applied to allow floats for slides/page
          requestEl = slideIndex * parseInt(getMoveBy());
          position = slider.children.eq(requestEl).position();
        }

        /* If the position doesn't exist
         * (e.g. if you destroy the slider on a next click),
         * it doesn't throw an error.
         */
        if (typeof (position) !== 'undefined') {
          value = slider.settings.mode === 'horizontal' ? -(position.left - moveBy) : -position.top;
          // plugin values to be animated
          setPositionProperty(value, 'slide', slider.settings.speed);
        } else {
          slider.working = false;
        }
      }
      if (slider.settings.ariaHidden) { applyAriaHiddenAttributes(slider.active.index * getMoveBy()); }
    };

    /**
     * Transitions to the next slide in the show
     */
    el.goToNextSlide = function() {
      // if infiniteLoop is false and last page is showing, disregard call
      if (!slider.settings.infiniteLoop && slider.active.last) { return; }
      var pagerIndex = parseInt(slider.active.index) + 1;
      el.goToSlide(pagerIndex, 'next');
    };

    /**
     * Transitions to the prev slide in the show
     */
    el.goToPrevSlide = function() {
      // if infiniteLoop is false and last page is showing, disregard call
      if (!slider.settings.infiniteLoop && slider.active.index === 0) { return; }
      var pagerIndex = parseInt(slider.active.index) - 1;
      el.goToSlide(pagerIndex, 'prev');
    };

    /**
     * Starts the auto show
     *
     * @param preventControlUpdate (boolean)
     *  - if true, auto controls state will not be updated
     */
    el.startAuto = function(preventControlUpdate) {
      // if an interval already exists, disregard call
      if (slider.interval) { return; }
      // create an interval
      slider.interval = setInterval(function() {
        if (slider.settings.autoDirection === 'next') {
          el.goToNextSlide();
        } else {
          el.goToPrevSlide();
        }
      }, slider.settings.pause);
      // if auto controls are displayed and preventControlUpdate is not true
      if (slider.settings.autoControls && preventControlUpdate !== true) { updateAutoControls('stop'); }
    };

    /**
     * Stops the auto show
     *
     * @param preventControlUpdate (boolean)
     *  - if true, auto controls state will not be updated
     */
    el.stopAuto = function(preventControlUpdate) {
      // if no interval exists, disregard call
      if (!slider.interval) { return; }
      // clear the interval
      clearInterval(slider.interval);
      slider.interval = null;
      // if auto controls are displayed and preventControlUpdate is not true
      if (slider.settings.autoControls && preventControlUpdate !== true) { updateAutoControls('start'); }
    };

    /**
     * Returns current slide index (zero-based)
     */
    el.getCurrentSlide = function() {
      return slider.active.index;
    };

    /**
     * Returns current slide element
     */
    el.getCurrentSlideElement = function() {
      return slider.children.eq(slider.active.index);
    };

    /**
     * Returns a slide element
     * @param index (int)
     *  - The index (zero-based) of the element you want returned.
     */
    el.getSlideElement = function(index) {
      return slider.children.eq(index);
    };

    /**
     * Returns number of slides in show
     */
    el.getSlideCount = function() {
      return slider.children.length;
    };

    /**
     * Return slider.working variable
     */
    el.isWorking = function() {
      return slider.working;
    };

    /**
     * Update all dynamic slider elements
     */
    el.redrawSlider = function() {
      // resize all children in ratio to new screen size
      slider.children.add(el.find('.bx-clone')).outerWidth(getSlideWidth());
      // adjust the height
      slider.viewport.css('height', getViewportHeight());
      // update the slide position
      if (!slider.settings.ticker) { setSlidePosition(); }
      // if active.last was true before the screen resize, we want
      // to keep it last no matter what screen size we end on
      if (slider.active.last) { slider.active.index = getPagerQty() - 1; }
      // if the active index (page) no longer exists due to the resize, simply set the index as last
      if (slider.active.index >= getPagerQty()) { slider.active.last = true; }
      // if a pager is being displayed and a custom pager is not being used, update it
      if (slider.settings.pager && !slider.settings.pagerCustom) {
        populatePager();
        updatePagerActive(slider.active.index);
      }
      if (slider.settings.ariaHidden) { applyAriaHiddenAttributes(slider.active.index * getMoveBy()); }
    };

    /**
     * Destroy the current instance of the slider (revert everything back to original state)
     */
    el.destroySlider = function() {
      // don't do anything if slider has already been destroyed
      if (!slider.initialized) { return; }
      slider.initialized = false;
      $('.bx-clone', this).remove();
      slider.children.each(function() {
        if ($(this).data('origStyle') !== undefined) {
          $(this).attr('style', $(this).data('origStyle'));
        } else {
          $(this).removeAttr('style');
        }
      });
      if ($(this).data('origStyle') !== undefined) {
        this.attr('style', $(this).data('origStyle'));
      } else {
        $(this).removeAttr('style');
      }
      $(this).unwrap().unwrap();
      if (slider.controls.el) { slider.controls.el.remove(); }
      if (slider.controls.next) { slider.controls.next.remove(); }
      if (slider.controls.prev) { slider.controls.prev.remove(); }
      if (slider.pagerEl && slider.settings.controls && !slider.settings.pagerCustom) { slider.pagerEl.remove(); }
      $('.bx-caption', this).remove();
      if (slider.controls.autoEl) { slider.controls.autoEl.remove(); }
      clearInterval(slider.interval);
      if (slider.settings.responsive) { $(window).unbind('resize', resizeWindow); }
      if (slider.settings.keyboardEnabled) { $(document).unbind('keydown', keyPress); }
      //remove self reference in data
      $(this).removeData('bxSlider');
    };

    /**
     * Reload the slider (revert all DOM changes, and re-initialize)
     */
    el.reloadSlider = function(settings) {
      if (settings !== undefined) { options = settings; }
      el.destroySlider();
      init();
      //store reference to self in order to access public functions later
      $(el).data('bxSlider', this);
    };

    init();

    $(el).data('bxSlider', this);

    // returns the current jQuery object
    return this;
  };

})(jQuery);


// ONLOAD

window.addEventListener("load", function(event) {
    lazyload();
});



//  SEARCH

function activateSearch(){

  jQuery('.trigger-search').click(
    function(){


      if(teledoce.is_mobile){

        jQuery('#mobile-header .search input[name=s]').focus()

      }else{

        var $input = jQuery('.site-header .search');
        $input.addClass('on').focus();

      }

      

      return false;

    }
  );

  jQuery('.search input').focusout(
    function(){
      jQuery('.site-header .search').removeClass('on');
      jQuery('.hamburger').fadeIn();
      jQuery('body').removeClass('--search');
    }
  );

}


//  LAZY

!function(t,e){"use strict";if("IntersectionObserver"in t&&"IntersectionObserverEntry"in t&&"intersectionRatio"in t.IntersectionObserverEntry.prototype)"isIntersecting"in t.IntersectionObserverEntry.prototype||Object.defineProperty(t.IntersectionObserverEntry.prototype,"isIntersecting",{get:function(){return this.intersectionRatio>0}});else{var n=[];i.prototype.THROTTLE_TIMEOUT=100,i.prototype.POLL_INTERVAL=null,i.prototype.USE_MUTATION_OBSERVER=!0,i.prototype.observe=function(t){if(!this._observationTargets.some(function(e){return e.element==t})){if(!t||1!=t.nodeType)throw new Error("target must be an Element");this._registerInstance(),this._observationTargets.push({element:t,entry:null}),this._monitorIntersections(),this._checkForIntersections()}},i.prototype.unobserve=function(t){this._observationTargets=this._observationTargets.filter(function(e){return e.element!=t}),this._observationTargets.length||(this._unmonitorIntersections(),this._unregisterInstance())},i.prototype.disconnect=function(){this._observationTargets=[],this._unmonitorIntersections(),this._unregisterInstance()},i.prototype.takeRecords=function(){var t=this._queuedEntries.slice();return this._queuedEntries=[],t},i.prototype._initThresholds=function(t){var e=t||[0];return Array.isArray(e)||(e=[e]),e.sort().filter(function(t,e,n){if("number"!=typeof t||isNaN(t)||t<0||t>1)throw new Error("threshold must be a number between 0 and 1 inclusively");return t!==n[e-1]})},i.prototype._parseRootMargin=function(t){var e=(t||"0px").split(/\s+/).map(function(t){var e=/^(-?\d*\.?\d+)(px|%)$/.exec(t);if(!e)throw new Error("rootMargin must be specified in pixels or percent");return{value:parseFloat(e[1]),unit:e[2]}});return e[1]=e[1]||e[0],e[2]=e[2]||e[0],e[3]=e[3]||e[1],e},i.prototype._monitorIntersections=function(){this._monitoringIntersections||(this._monitoringIntersections=!0,this.POLL_INTERVAL?this._monitoringInterval=setInterval(this._checkForIntersections,this.POLL_INTERVAL):(r(t,"resize",this._checkForIntersections,!0),r(e,"scroll",this._checkForIntersections,!0),this.USE_MUTATION_OBSERVER&&"MutationObserver"in t&&(this._domObserver=new MutationObserver(this._checkForIntersections),this._domObserver.observe(e,{attributes:!0,childList:!0,characterData:!0,subtree:!0}))))},i.prototype._unmonitorIntersections=function(){this._monitoringIntersections&&(this._monitoringIntersections=!1,clearInterval(this._monitoringInterval),this._monitoringInterval=null,s(t,"resize",this._checkForIntersections,!0),s(e,"scroll",this._checkForIntersections,!0),this._domObserver&&(this._domObserver.disconnect(),this._domObserver=null))},i.prototype._checkForIntersections=function(){var e=this._rootIsInDom(),n=e?this._getRootRect():{top:0,bottom:0,left:0,right:0,width:0,height:0};this._observationTargets.forEach(function(i){var r=i.element,s=h(r),c=this._rootContainsTarget(r),a=i.entry,u=e&&c&&this._computeTargetAndRootIntersection(r,n),l=i.entry=new o({time:t.performance&&performance.now&&performance.now(),target:r,boundingClientRect:s,rootBounds:n,intersectionRect:u});a?e&&c?this._hasCrossedThreshold(a,l)&&this._queuedEntries.push(l):a&&a.isIntersecting&&this._queuedEntries.push(l):this._queuedEntries.push(l)},this),this._queuedEntries.length&&this._callback(this.takeRecords(),this)},i.prototype._computeTargetAndRootIntersection=function(n,o){if("none"!=t.getComputedStyle(n).display){for(var i,r,s,c,u,l,p,d,f=h(n),g=a(n),_=!1;!_;){var v=null,m=1==g.nodeType?t.getComputedStyle(g):{};if("none"==m.display)return;if(g==this.root||g==e?(_=!0,v=o):g!=e.body&&g!=e.documentElement&&"visible"!=m.overflow&&(v=h(g)),v&&(i=v,r=f,s=void 0,c=void 0,u=void 0,l=void 0,p=void 0,d=void 0,s=Math.max(i.top,r.top),c=Math.min(i.bottom,r.bottom),u=Math.max(i.left,r.left),l=Math.min(i.right,r.right),d=c-s,!(f=(p=l-u)>=0&&d>=0&&{top:s,bottom:c,left:u,right:l,width:p,height:d})))break;g=a(g)}return f}},i.prototype._getRootRect=function(){var t;if(this.root)t=h(this.root);else{var n=e.documentElement,o=e.body;t={top:0,left:0,right:n.clientWidth||o.clientWidth,width:n.clientWidth||o.clientWidth,bottom:n.clientHeight||o.clientHeight,height:n.clientHeight||o.clientHeight}}return this._expandRectByRootMargin(t)},i.prototype._expandRectByRootMargin=function(t){var e=this._rootMarginValues.map(function(e,n){return"px"==e.unit?e.value:e.value*(n%2?t.width:t.height)/100}),n={top:t.top-e[0],right:t.right+e[1],bottom:t.bottom+e[2],left:t.left-e[3]};return n.width=n.right-n.left,n.height=n.bottom-n.top,n},i.prototype._hasCrossedThreshold=function(t,e){var n=t&&t.isIntersecting?t.intersectionRatio||0:-1,o=e.isIntersecting?e.intersectionRatio||0:-1;if(n!==o)for(var i=0;i<this.thresholds.length;i++){var r=this.thresholds[i];if(r==n||r==o||r<n!=r<o)return!0}},i.prototype._rootIsInDom=function(){return!this.root||c(e,this.root)},i.prototype._rootContainsTarget=function(t){return c(this.root||e,t)},i.prototype._registerInstance=function(){n.indexOf(this)<0&&n.push(this)},i.prototype._unregisterInstance=function(){var t=n.indexOf(this);-1!=t&&n.splice(t,1)},t.IntersectionObserver=i,t.IntersectionObserverEntry=o}function o(t){this.time=t.time,this.target=t.target,this.rootBounds=t.rootBounds,this.boundingClientRect=t.boundingClientRect,this.intersectionRect=t.intersectionRect||{top:0,bottom:0,left:0,right:0,width:0,height:0},this.isIntersecting=!!t.intersectionRect;var e=this.boundingClientRect,n=e.width*e.height,o=this.intersectionRect,i=o.width*o.height;this.intersectionRatio=n?Number((i/n).toFixed(4)):this.isIntersecting?1:0}function i(t,e){var n,o,i,r=e||{};if("function"!=typeof t)throw new Error("callback must be a function");if(r.root&&1!=r.root.nodeType)throw new Error("root must be an Element");this._checkForIntersections=(n=this._checkForIntersections.bind(this),o=this.THROTTLE_TIMEOUT,i=null,function(){i||(i=setTimeout(function(){n(),i=null},o))}),this._callback=t,this._observationTargets=[],this._queuedEntries=[],this._rootMarginValues=this._parseRootMargin(r.rootMargin),this.thresholds=this._initThresholds(r.threshold),this.root=r.root||null,this.rootMargin=this._rootMarginValues.map(function(t){return t.value+t.unit}).join(" ")}function r(t,e,n,o){"function"==typeof t.addEventListener?t.addEventListener(e,n,o||!1):"function"==typeof t.attachEvent&&t.attachEvent("on"+e,n)}function s(t,e,n,o){"function"==typeof t.removeEventListener?t.removeEventListener(e,n,o||!1):"function"==typeof t.detatchEvent&&t.detatchEvent("on"+e,n)}function h(t){var e;try{e=t.getBoundingClientRect()}catch(t){}return e?(e.width&&e.height||(e={top:e.top,right:e.right,bottom:e.bottom,left:e.left,width:e.right-e.left,height:e.bottom-e.top}),e):{top:0,bottom:0,left:0,right:0,width:0,height:0}}function c(t,e){for(var n=e;n;){if(n==t)return!0;n=a(n)}return!1}function a(t){var e=t.parentNode;return e&&11==e.nodeType&&e.host?e.host:e}}(window,document);

function _extends(){return(_extends=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t}).apply(this,arguments)}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}!function(t,e){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.LazyLoad=e()}(this,function(){"use strict";var t="undefined"!=typeof window,e=t&&!("onscroll"in window)||"undefined"!=typeof navigator&&/(gle|ing|ro)bot|crawl|spider/i.test(navigator.userAgent),n=t&&"IntersectionObserver"in window,o=t&&"classList"in document.createElement("p"),r={elements_selector:"img",container:e||t?document:null,threshold:300,thresholds:null,data_src:"src",data_srcset:"srcset",data_sizes:"sizes",data_bg:"bg",class_loading:"loading",class_loaded:"loaded",class_error:"error",load_delay:0,auto_unobserve:!0,callback_enter:null,callback_exit:null,callback_reveal:null,callback_loaded:null,callback_error:null,callback_finish:null,use_native:!1},a=function(t,e){var n,o=new t(e);try{n=new CustomEvent("LazyLoad::Initialized",{detail:{instance:o}})}catch(t){(n=document.createEvent("CustomEvent")).initCustomEvent("LazyLoad::Initialized",!1,!1,{instance:o})}window.dispatchEvent(n)};var i=function(t,e){return t.getAttribute("data-"+e)},s=function(t,e,n){var o="data-"+e;null!==n?t.setAttribute(o,n):t.removeAttribute(o)},c=function(t){return"true"===i(t,"was-processed")},l=function(t,e){return s(t,"ll-timeout",e)},u=function(t){return i(t,"ll-timeout")},d=function(t,e){t&&t(e)},f=function(t,e){t._loadingCount+=e,0===t._elements.length&&0===t._loadingCount&&d(t._settings.callback_finish)},_=function(t){for(var e,n=[],o=0;e=t.children[o];o+=1)"SOURCE"===e.tagName&&n.push(e);return n},v=function(t,e,n){n&&t.setAttribute(e,n)},g=function(t,e){v(t,"sizes",i(t,e.data_sizes)),v(t,"srcset",i(t,e.data_srcset)),v(t,"src",i(t,e.data_src))},m={IMG:function(t,e){var n=t.parentNode;n&&"PICTURE"===n.tagName&&_(n).forEach(function(t){g(t,e)});g(t,e)},IFRAME:function(t,e){v(t,"src",i(t,e.data_src))},VIDEO:function(t,e){_(t).forEach(function(t){v(t,"src",i(t,e.data_src))}),v(t,"src",i(t,e.data_src)),t.load()}},b=function(t,e){var n,o,r=e._settings,a=t.tagName,s=m[a];if(s)return s(t,r),f(e,1),void(e._elements=(n=e._elements,o=t,n.filter(function(t){return t!==o})));!function(t,e){var n=i(t,e.data_src),o=i(t,e.data_bg);n&&(t.style.backgroundImage='url("'.concat(n,'")')),o&&(t.style.backgroundImage=o)}(t,r)},h=function(t,e){o?t.classList.add(e):t.className+=(t.className?" ":"")+e},p=function(t,e,n){t.addEventListener(e,n)},y=function(t,e,n){t.removeEventListener(e,n)},E=function(t,e,n){y(t,"load",e),y(t,"loadeddata",e),y(t,"error",n)},w=function(t,e,n){var r=n._settings,a=e?r.class_loaded:r.class_error,i=e?r.callback_loaded:r.callback_error,s=t.target;!function(t,e){o?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\s+)"+e+"(\\s+|$)")," ").replace(/^\s+/,"").replace(/\s+$/,"")}(s,r.class_loading),h(s,a),d(i,s),f(n,-1)},I=function(t,e){var n=function n(r){w(r,!0,e),E(t,n,o)},o=function o(r){w(r,!1,e),E(t,n,o)};!function(t,e,n){p(t,"load",e),p(t,"loadeddata",e),p(t,"error",n)}(t,n,o)},k=["IMG","IFRAME","VIDEO"],A=function(t,e){var n=e._observer;z(t,e),n&&e._settings.auto_unobserve&&n.unobserve(t)},L=function(t){var e=u(t);e&&(clearTimeout(e),l(t,null))},x=function(t,e){var n=e._settings.load_delay,o=u(t);o||(o=setTimeout(function(){A(t,e),L(t)},n),l(t,o))},z=function(t,e,n){var o=e._settings;!n&&c(t)||(k.indexOf(t.tagName)>-1&&(I(t,e),h(t,o.class_loading)),b(t,e),function(t){s(t,"was-processed","true")}(t),d(o.callback_reveal,t),d(o.callback_set,t))},O=function(t){return!!n&&(t._observer=new IntersectionObserver(function(e){e.forEach(function(e){return function(t){return t.isIntersecting||t.intersectionRatio>0}(e)?function(t,e){var n=e._settings;d(n.callback_enter,t),n.load_delay?x(t,e):A(t,e)}(e.target,t):function(t,e){var n=e._settings;d(n.callback_exit,t),n.load_delay&&L(t)}(e.target,t)})},{root:(e=t._settings).container===document?null:e.container,rootMargin:e.thresholds||e.threshold+"px"}),!0);var e},N=["IMG","IFRAME"],C=function(t,e){return function(t){return t.filter(function(t){return!c(t)})}((n=t||function(t){return t.container.querySelectorAll(t.elements_selector)}(e),Array.prototype.slice.call(n)));var n},M=function(t,e){this._settings=function(t){return _extends({},r,t)}(t),this._loadingCount=0,O(this),this.update(e)};return M.prototype={update:function(t){var n,o=this,r=this._settings;(this._elements=C(t,r),!e&&this._observer)?(function(t){return t.use_native&&"loading"in HTMLImageElement.prototype}(r)&&((n=this)._elements.forEach(function(t){-1!==N.indexOf(t.tagName)&&(t.setAttribute("loading","lazy"),z(t,n))}),this._elements=C(t,r)),this._elements.forEach(function(t){o._observer.observe(t)})):this.loadAll()},destroy:function(){var t=this;this._observer&&(this._elements.forEach(function(e){t._observer.unobserve(e)}),this._observer=null),this._elements=null,this._settings=null},load:function(t,e){z(t,this,e)},loadAll:function(){var t=this;this._elements.forEach(function(e){A(e,t)})}},t&&function(t,e){if(e)if(e.length)for(var n,o=0;n=e[o];o+=1)a(t,n);else a(t,e)}(M,window.lazyLoadOptions),M});
//# sourceMappingURL=lazyload.min.js.map












function overlayLoginClose(callback){

  // if(teledoce.isFrontPage()) jQuery('#main-head').find('.title').show();

  jQuery('body').removeClass('with-mi-tele-login');

  jQuery('#mi-tele-login').fadeOut(
    function(){
      if(callback!=null) callback();
    }
  );

}

function overlayLogin(callback){

  var $overlay = jQuery('#mi-tele-login');

  if($overlay.length == 0 || true){

    // var $overlay = jQuery('<div id="mi-tele-login">');

    var $overlay_container = jQuery('#mi-tele-login-container');

    $overlay.append($overlay_container);

    // $overlay_container.html('<a href="#close"><i class="fa fa-times"></i></a><h2>Usuarios Registrados</h2><form method="post" action="/login/"><input type="hidden" name="action" value="login" /><ul><li><label>Email:</label><input type="text" name="email"></li><li><label>Contraseña:</label><input type="password" name="password"></li></ul><input type="submit" value="INGRESAR" /></form>');


    $close = $overlay_container.find('a[href="#close"]');

    // $overlay_container.find('a[href="#lost-pwd"]').click(function(){ lostPassword(jQuery(this)); return false; });

    // $overlay_container.find('a[href="#registro"]').click(function(){ signup(); return false; });

    // $overlay_container.find('a[href="#volver-a-login"]').click(function(){ loginForm(); return false; });

    // $overlay_container.find('a[href="#volver-a-login-2"]').click(function(){ loginFormFromReset(); return false; });

    // jQuery('body').prepend($overlay);


    // $overlay_container.click(
    //   function(e){
    //     e.stopPropagation();    
    //   }
    // );

    // $overlay.click(
    //   function(){
    //     overlayLoginClose();
    //   }
    // );

    jQuery('#mi-tele-login').find('a.mi-tele-login__close').click(
      function(){
        overlayLoginClose();
        return false;
      }
    );


    // Disable natural submit event
    jQuery('#mi-tele-login').find('form.login').submit(
      function(){

        var $form = jQuery(this);



        var email = $form.find('input[name=email]').val();
        var password = $form.find('input[name=password]').val();
        var $submit = $form.find('input[type=submit]');

        $submit.addClass('loading');

        $form.find('.errors').html('');

        teledoce.user.login(
          email,
          password,
          function(r){

            $submit.removeClass('loading');

            if (r.success){

              // teledoce.ui.displayUsername(r.result.user.name);
              displayUsername(r.result.user.name);

              // if(!r.result.user.activated){ // Not activated
              //   teledoce.ui.accountNotYetActivated(r.result.nombre);
              //   return;
              // }

              overlayLoginClose(
                function(){
                  // location.reload();
                  // jQuery('body').fadeOut();
                  
                  // console.log(r);
                  if(callback){
                    callback();
                  }else{
                    window.open(teledoce.path() + 'mi-tele' ,'_self');
                  }
                }
              );
            }else{
              // $form.find('.errors').html('Email y/o contraseña incorrectos.');
              $form.find('.errors').html(r.error);
            }
          }
        );


        


        // ajax_login(
        //  jQuery(this).find('input[name=email]').val(),
        //  jQuery(this).find('input[name=password]').val(),
        //  jQuery(this).find('.submit').find('input[type=submit]'),
        //  jQuery(this).find('.error')
        // );

        return false;
      }
    );


    // Disable natural submit event
    jQuery('#mi-tele-login').find('form.signup').submit(
      function(){
        teledoce.ui.signup(jQuery(this));
        return false;
      }
    );

  }else{
    // $overlay.fadeIn('fast');
  }


  jQuery('body').addClass('with-mi-tele-login');




}



function lostPassword($a){

  if($a.hasClass('reset')){

    $a.text('Olvidaste tu contraseña?');

    jQuery('#mi-tele-login').find('form.login').attr('action', '/login/');
    jQuery('#mi-tele-login').find('form.login').find('.reset-links').slideUp();
    jQuery('#mi-tele-login').find('form.login').find('.login-links').slideDown();
    jQuery('#mi-tele-login').find('form.login').find('input[type=submit]').attr('value', 'Ingresar');
    jQuery('#mi-tele-login').find('form.login').find('.password').slideDown();
    teledoce.ui.clearLoginErrors();

    $a.removeClass('reset');

  }else{

    $a.text('Cancelar');

    jQuery('#mi-tele-login').find('form.login').attr('action', '/reset/');
    jQuery('#mi-tele-login').find('form.login').find('.reset-links').slideDown();
    jQuery('#mi-tele-login').find('form.login').find('.login-links').slideUp();
    jQuery('#mi-tele-login').find('form.login').find('input[type=submit]').attr('value', 'Recuperar contraseña');
    jQuery('#mi-tele-login').find('form.login').find('.password').slideUp();
    teledoce.ui.clearLoginErrors();

    $a.addClass('reset');

  }

}

function loginFormFromReset(){

  jQuery('#mi-tele-login').find('form.login').find('.reset-links').slideUp();
  jQuery('#mi-tele-login').find('form.login').find('.login-links').slideDown();
  jQuery('#mi-tele-login').find('form.login').find('input[type=submit]').attr('value', 'Ingresar');
  jQuery('#mi-tele-login').find('form.login').find('.password').slideDown();
  teledoce.ui.clearLoginErrors();

}

function signup(){

  teledoce.ui.clearLoginErrors();

  jQuery('#mi-tele-login').addClass('signup');
  jQuery('body').animate({scrollTop: 0});


  // var $form = jQuery('form.signup');
  // var d = jQuery(window).height() - ($form.offset().top+$form.height());
  // if(d<0){
  //  $form.height($form.height()+d);
  //  $form.css('overflow-y', 'scroll');
  // }

  jQuery('#mi-tele-login').css('height', jQuery(document).height());

  jQuery('#mi-tele-login').find('form.login').fadeOut(
    function(){
      jQuery('#mi-tele-login').find('form.signup').fadeIn();
    }
  );

}

function loginForm(){

  // teledoce.ui.clearLoginErrors();

  jQuery('#mi-tele-login').removeClass('signup');

  jQuery('#mi-tele-login').find('a[href="#lost-pwd"]').text('Olvidaste tu contraseña?').removeClass('reset');

  jQuery('#mi-tele-login').find('form.login').find('input[type=submit]').attr('value', 'Ingresar');

  jQuery('#mi-tele-login').find('form.signup').fadeOut(
    function(){
      jQuery('.password').show();
      jQuery('#mi-tele-login').find('form.login').fadeIn();
    }
  );

}




function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    var expires = "expires="+d.toUTCString();
    document.cookie = cname + "=" + cvalue + "; " + expires + "; path=/";
}


function getCookie(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for(var i=0; i<ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1);
        if (c.indexOf(name) == 0) return c.substring(name.length,c.length);
    }
    return "";
}




function displayUsername(){

  var name = teledoce.user.get().name;
  jQuery('#mi-tele-login-container').html('<div class="welcome-back">Bienvenido '+name+'!</div>');

}



function isLocalHost(){
  return location.href.toLowerCase().indexOf('localhost:8888')>-1;
}






// MEDIASTREAM PLAYER API
(function(){var b=function(){function b(c,a){var b,k;null==a&&(a={});this._isPlaying=this.playerDestroyed=this._isReady=!1;var g=[];document.getElementById(c)||g.push("ID must be a valid DOM Element");/^[0-9a-fA-F]{24}$/.test(a.id)||this._getYouTubeID(a.id)||g.push("Options.id must be a valid Platform Video ID or a YouTube Video ID");"media"!==(b=a.type)&&"live"!==b&&"dvr"!==b&&g.push('Options.type must be "media", "live" or "dvr"');isNaN(parseInt(a.width))&&g.push("Options.width must be a positive integer");
isNaN(parseInt(a.height))&&g.push("Options.height must be a positive integer");if("http"===(k=a.protocol)||"https"===k)this._protocol=a.protocol;0<g.length?this._error(g):this._init(c,a)}b.prototype._init=function(b,a){var c,k,g,m,n,p,q,r,t,u,v,w,x,y,z,A,B,C,D,E;this._callbacks={};this._bindEvent(window,"message",function(a){return function(c){if(!a.playerDestroyed&&(null!=c?c.source:void 0)===a._IFrameContent)return a._receiveMessage(arguments)}}(this));this._events={};var e="onAdsAdBreakReady onAdsAdMetadata onAdsAllAdsCompleted onAdsClick onAdsComplete onAdsContentPauseRequested onAdsContentResumeRequested onAdsDurationChange onAdsFirstQuartile onAdsImpression onAdsLinearChanged onAdsLoaded onAdsLog onAdsMidpoint onAdsPaused onAdsResumed onAdsSkippableStateChanged onAdsSkipped onAdsStarted onAdsThirdQuartile onAdsUserClose onAdsVolumeChanged onAdsVolumeMuted".split(" ");
var l=0;for(k=e.length;l<k;l++){var h=e[l];"function"===typeof(null!=(g=a.events)?g[h]:void 0)&&(this._events[h]=a.events[h])}"function"===typeof(null!=(m=a.events)?m.onPlayerReady:void 0)&&(this._events.onPlayerReady=a.events.onPlayerReady);"function"===typeof(null!=(w=a.events)?w.onVideoEnd:void 0)&&(this._events.onVideoEnd=a.events.onVideoEnd);"function"===typeof(null!=(y=a.events)?y.onVideoStop:void 0)&&(this._events.onVideoStop=a.events.onVideoStop);"function"===typeof(null!=(z=a.events)?z.onVideoError:
void 0)&&(this._events.onVideoError=a.events.onVideoError);"function"===typeof(null!=(A=a.events)?A.onVolumeChange:void 0)&&(this._events.onVolumeChange=a.events.onVolumeChange);"function"===typeof(null!=(B=a.events)?B.onPlay:void 0)&&(this._events.onPlay=a.events.onPlay);"function"===typeof(null!=(C=a.events)?C.onSeeked:void 0)&&(this._events.onSeeked=a.events.onSeeked);"function"===typeof(null!=(D=a.events)?D.onReplay:void 0)&&(this._events.onReplay=a.events.onReplay);"function"===typeof(null!=
(E=a.events)?E.onProgramDateTime:void 0)&&(this._events.onProgramDateTime=a.events.onProgramDateTime);"function"===typeof(null!=(n=a.events)?n.onTimeUpdate:void 0)&&(this._events.onTimeUpdate=a.events.onTimeUpdate);"function"===typeof(null!=(p=a.events)?p.onFullscreenChange:void 0)&&(this._events.onFullscreenChange=a.events.onFullscreenChange);"function"===typeof(null!=(q=a.events)?q.onBuffering:void 0)&&(this._events.onBuffering=a.events.onBuffering);"function"===typeof(null!=(r=a.events)?r.onFragChanged:
void 0)&&(this._events.onFragChanged=a.events.onFragChanged);this._IFrameURLOptions=[];this._IFrameURLOptions.push("jsapi\x3dtrue");null!=a.loop&&this._IFrameURLOptions.push("loop\x3d"+encodeURIComponent(a.loop));null!=a.pause_ad_on_click&&this._IFrameURLOptions.push("pause_ad_on_click\x3d"+encodeURIComponent(a.pause_ad_on_click));null!=a.skip_ad_on_touch&&this._IFrameURLOptions.push("skip_ad_on_touch\x3d"+encodeURIComponent(a.skip_ad_on_touch));null!=a.pause_on_screen_click&&this._IFrameURLOptions.push("pause_on_screen_click\x3d"+
encodeURIComponent(a.pause_on_screen_click));null!=a.autoplay&&this._IFrameURLOptions.push("autoplay\x3d"+encodeURIComponent(a.autoplay));null!=a.controls&&this._IFrameURLOptions.push("controls\x3d"+encodeURIComponent(a.controls));null!=a.volume&&this._IFrameURLOptions.push("volume\x3d"+encodeURIComponent(a.volume));a.player&&this._IFrameURLOptions.push("player\x3d"+encodeURIComponent(a.player));a.skin&&this._IFrameURLOptions.push("skin\x3d"+encodeURIComponent(a.skin));a.ref&&this._IFrameURLOptions.push("ref\x3d"+
encodeURIComponent(a.ref));null!=a.startTime&&this._IFrameURLOptions.push("starttime\x3d"+encodeURIComponent(a.startTime));null!=a.endTime&&this._IFrameURLOptions.push("endtime\x3d"+encodeURIComponent(a.endTime));null!=a.title&&this._IFrameURLOptions.push("title\x3d"+encodeURIComponent(a.title));null!=a.show_title&&this._IFrameURLOptions.push("show_title\x3d"+encodeURIComponent(a.show_title));null!=a.show_timeline_time&&this._IFrameURLOptions.push("show_timeline_time\x3d"+encodeURIComponent(a.show_timeline_time));
null!=a.access_token&&this._IFrameURLOptions.push("access_token\x3d"+encodeURIComponent(a.access_token));null!=a.admin_token&&this._IFrameURLOptions.push("admin_token\x3d"+encodeURIComponent(a.admin_token));null!=a.source&&this._IFrameURLOptions.push("source\x3d"+encodeURIComponent(a.source));null!=a.customer&&this._IFrameURLOptions.push("c\x3d"+encodeURIComponent(a.customer));null!=a.analyticsCustom&&this._IFrameURLOptions.push("ac\x3d"+encodeURIComponent(a.analyticsCustom));null!=a.rendition_rule&&
this._IFrameURLOptions.push("rendition_rule\x3d"+encodeURIComponent(a.rendition_rule));null!=a.dnt&&this._IFrameURLOptions.push("dnt\x3d"+encodeURIComponent(a.dnt));null!=a.show_previews&&this._IFrameURLOptions.push("show_previews\x3d"+encodeURIComponent(a.show_previews));null!=a.playlistId&&this._IFrameURLOptions.push("playlistId\x3d"+encodeURIComponent(a.playlistId));null!=a.player_skin&&this._IFrameURLOptions.push("player_skin\x3d"+encodeURIComponent(a.player_skin));null!=a.subtitles&&this._IFrameURLOptions.push("subtitles\x3d"+
encodeURIComponent(a.subtitles));null!=a.mse_buffer_length&&this._IFrameURLOptions.push("mse_buffer_length\x3d"+encodeURIComponent(a.mse_buffer_length));null!=a.mse_buffer_size&&this._IFrameURLOptions.push("mse_buffer_size\x3d"+encodeURIComponent(a.mse_buffer_size));null!=a.maxProfile&&this._IFrameURLOptions.push("max_profile\x3d"+encodeURIComponent(a.maxProfile));null!=(null!=(t=a.style)?t.basecolor:void 0)&&this._IFrameURLOptions.push("style[basecolor]\x3d"+encodeURIComponent(a.style.basecolor));
null!=(null!=(u=a.style)?u.backgroundcolor:void 0)&&this._IFrameURLOptions.push("style[backgroundcolor]\x3d"+encodeURIComponent(a.style.backgroundcolor));!0===a.mse&&this._IFrameURLOptions.push("mse\x3dtrue");!0===a.rtsp&&this._IFrameURLOptions.push("rtsp\x3dtrue");!0===a.debug&&this._IFrameURLOptions.push("debug\x3dtrue");!0===a.ima_debug&&this._IFrameURLOptions.push("ima_debug\x3dtrue");!0===a.no_ad&&this._IFrameURLOptions.push("no_ad\x3dtrue");"dvr"===a.type&&this._IFrameURLOptions.push("type\x3ddvr");
h=a.style||{};for(c in h)if(e=h[c],"object"!==typeof e)this._IFrameURLOptions.push("style["+c+"]\x3d"+encodeURIComponent(e));else for(f in e)l=e[f],this._IFrameURLOptions.push("style["+c+"]["+f+"]\x3d"+encodeURIComponent(l));var f=a.ads||{};for(c in f)e=f[c],this._IFrameURLOptions.push("ads["+c+"]\x3d"+encodeURIComponent(e));f=a.custom||{};for(c in f)e=f[c],this._IFrameURLOptions.push("custom."+c+"\x3d"+encodeURIComponent(e));f=(null!=(v=a.youbora)?v.extra:void 0)||{};for(c in f)e=f[c],this._IFrameURLOptions.push("youbora[extra]["+
c+"]\x3d"+encodeURIComponent(e));this._IFrameURL=[];this._IFrameURL.push(this.protocol()+"//"+(window.EMBED_HOST||"mdstrm.com")+"/");this._IFrameURL.push("live"===(x=a.type)||"dvr"===x?"live-stream":"embed");this._IFrameURL.push("/");this._getYouTubeID(a.id)&&this._IFrameURL.push("y/");this._IFrameURL.push(this._getYouTubeID(a.id)||a.id);this._IFrameURL.push("?");this._IFrameURL.push(this._IFrameURLOptions.join("\x26"));this._playerContainer=document.getElementById(b);this._IFrameContainer=document.createElement("IFRAME");
a.className&&(this._IFrameContainer["class"]=[].concat.apply([],[a.className]).join(" "));this._IFrameContainer.src=this._IFrameURL.join("");a.width&&(this._IFrameContainer.width=parseInt(a.width));a.height&&(this._IFrameContainer.height=parseInt(a.height));this._IFrameContainer.frameBorder=0;this._IFrameContainer.setAttribute("allow","autoplay; fullscreen");this._IFrameContainer.setAttribute("allowfullscreen","");this._IFrameContainer.setAttribute("allowscriptaccess","always");this._IFrameContainer.setAttribute("scrolling",
"no");this._playerContainer.innerHTML="";this._playerContainer.appendChild(this._IFrameContainer);return this._IFrameContent=this._IFrameContainer.contentWindow};b.prototype.protocol=function(){return this._protocol?this._protocol+":":/^http/i.test(location.protocol)?location.protocol:"https:"};b.prototype._bindEvent=function(c,a,b){if(null!=c)return c.addEventListener?c.addEventListener(a,b,!1):c.attachEvent("on"+a,b)};b.prototype.destroy=function(){this._playerContainer.innerHTML="";return this.playerDestroyed=
!0};b.prototype._receiveMessage=function(){var c,a,b,k,g,m,n,p,q,r,t,u,v,w,x,y,z,A,B,C,D,E,e,l,h,f,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,aa;var d=null!=arguments?null!=(b=arguments[0])?b[0]:void 0:void 0;switch(null!=d?null!=(k=d.data)?k.eventName:void 0:void 0){case "onPlayerReady":return this._isReady=!0,null!=(x=this._events)?null!=(f=x.onPlayerReady)?f.apply(this,[null!=(P=d.data.eventData)?P:{}]):void 0:void 0;case "onVideoEnd":return this._isPlaying=!1,null!=(W=this._events)?null!=(X=W.onVideoEnd)?
X.apply(this,[null!=(Y=d.data.eventData)?Y:{}]):void 0:void 0;case "onVideoStop":return this._isPlaying=!1,null!=(Z=this._events)?null!=(aa=Z.onVideoStop)?aa.apply(this,[null!=(g=d.data.eventData)?g:{}]):void 0:void 0;case "onVideoError":return this._isPlaying=!1,null!=(m=this._events)?null!=(n=m.onVideoError)?n.apply(this,[null!=(p=d.data.eventData)?p:{}]):void 0:void 0;case "onVolumeChange":return null!=(q=this._events)?null!=(r=q.onVolumeChange)?r.apply(this,[null!=(t=d.data.eventData)?t:{}]):
void 0:void 0;case "onPlay":return this._isPlaying=!0,null!=(u=this._events)?null!=(v=u.onPlay)?v.apply(this,[null!=(w=d.data.eventData)?w:{}]):void 0:void 0;case "onSeeked":return null!=(y=this._events)?null!=(z=y.onSeeked)?z.apply(this,[null!=(A=d.data.eventData)?A:{}]):void 0:void 0;case "onReplay":return null!=(B=this._events)?null!=(C=B.onReplay)?C.apply(this,[null!=(D=d.data.eventData)?D:{}]):void 0:void 0;case "onProgramDateTime":return null!=(E=this._events)?null!=(e=E.onProgramDateTime)?
e.apply(this,[null!=(l=d.data.eventData)?l:{}]):void 0:void 0;case "onTimeUpdate":return null!=(h=this._events)?null!=(F=h.onTimeUpdate)?F.apply(this,[null!=(G=d.data.eventData)?G:{}]):void 0:void 0;case "onFullscreenChange":return null!=(H=this._events)?null!=(I=H.onFullscreenChange)?I.apply(this,[null!=(J=d.data.eventData)?J:{}]):void 0:void 0;case "onBuffering":return null!=(K=this._events)?null!=(L=K.onBuffering)?L.apply(this,[null!=(M=d.data.eventData)?M:{}]):void 0:void 0;case "onFragChanged":return null!=
(N=this._events)?null!=(O=N.onFragChanged)?O.apply(this,[null!=(Q=d.data.eventData)?Q:{}]):void 0:void 0;default:return null!=(R=this._events)&&R[null!=(S=d.data)?S.eventName:void 0]?this._events[d.data.eventName].apply(this,[null!=(T=d.data.eventData)?T:{}]):"function"===typeof(c=this._callbacks)[a=null!=d?null!=(U=d.data)?U.eventName:void 0:void 0]?c[a](null!=(V=d.data.eventData)?V:null):void 0}};b.prototype._postMessage=function(c){var a;return this._isReady&&!this.playerDestroyed?null!=(a=this._IFrameContent)?
a.postMessage(c,this.protocol()+"//"+(window.EMBED_HOST||"mdstrm.com")):void 0:this._error(["Player is not ready yet, please wait for the onPlayerReady event"])};b.prototype._getMessage=function(c,a){for(var b;null==b||null!=this._callbacks[b];)b=Math.random().toString(32).substr(2);this._callbacks[b]=function(c){return function(){"function"===typeof a&&a.apply(null,arguments);return delete c._callbacks[b]}}(this);return this._postMessage({cb:b,eventName:c.action||c,data:c.data})};b.prototype._getYouTubeID=
function(b){var a;null==b&&(b="");return null!=(a=b.match(/^youtube:(.+)/i))?a[1]:void 0};b.prototype._log=function(b){null==b&&(b=[]);return"undefined"!==typeof console&&null!==console?console.log("[MDSTRM.Player] "+b.join(". ")):void 0};b.prototype._error=function(b){null==b&&(b=[]);return"undefined"!==typeof console&&null!==console?console.error("[MDSTRM.Player] "+b.join(". ")):void 0};b.prototype.isReady=function(){return this._isReady&&!this.playerDestroyed};b.prototype.isPlaying=function(){return this._isPlaying};
b.prototype.requestAds=function(b){return b?(this._postMessage({action:"requestAds",data:b}),!0):!1};b.prototype.seekTo=function(b,a){null==b&&(b=0);null==a&&(a=function(){});return this._getMessage({action:"seekTo",data:b},a)};b.prototype.videoPlay=function(b){null==b&&(b=function(){});return this._getMessage("videoPlay",b)};b.prototype.videoStop=function(b){null==b&&(b=function(){});return this._getMessage("videoStop",b)};b.prototype.getCurrentTime=function(b){return this._getMessage("getCurrentTime",
b)};b.prototype.getVideoMetrics=function(b){return this._getMessage("getVideoMetrics",b)};b.prototype.setVolume=function(b,a){null==a&&(a=function(){});return this._getMessage({action:"setVolume",data:b},a)};b.prototype.setSrc=function(b,a){null==a&&(a=function(){});return this._getMessage({action:"setSrc",data:b},a)};b.prototype.setAdsVolume=function(b,a){null==a&&(a=function(){});return this._getMessage({action:"setAdsVolume",data:b},a)};b.prototype.getDuration=function(b){return this._getMessage("getDuration",
b)};b.prototype.getSnapshot=function(b,a,ba){return this._getMessage({action:"getSnapshot",data:{height:a,width:b}},ba)};b.prototype.playbackLevel=function(b,a){null==a&&(a=function(){});return this._getMessage({action:"playbackLevel",data:b},a)};b.prototype.playbackLevels=function(b){return this._getMessage("playbackLevels",b)};b.prototype.toggleFullScreen=function(b){return this._getMessage("toggleFullScreen",b)};b.prototype.addMarker=function(b,a){null==a&&(a=function(){});return this._getMessage({action:"addMarker",
data:b},a)};return b}();window.MediastreamPlayer=b;b.prototype.isReady=b.prototype.isReady;b.prototype.isPlaying=b.prototype.isPlaying;b.prototype.requestAds=b.prototype.requestAds;b.prototype.seekTo=b.prototype.seekTo;b.prototype.videoPlay=b.prototype.videoPlay;b.prototype.videoStop=b.prototype.videoStop;b.prototype.getCurrentTime=b.prototype.getCurrentTime;b.prototype.getVideoMetrics=b.prototype.getVideoMetrics;b.prototype.setVolume=b.prototype.setVolume;b.prototype.setSrc=b.prototype.setSrc;b.prototype.setAdsVolume=
b.prototype.setAdsVolume;b.prototype.getDuration=b.prototype.getDuration;b.prototype.getSnapshot=b.prototype.getSnapshot;b.prototype.destroy=b.prototype.destroy;b.prototype.playbackLevel=b.prototype.playbackLevel;b.prototype.playbackLevels=b.prototype.playbackLevels;b.prototype.toggleFullScreen=b.prototype.toggleFullScreen;b.prototype.addMarker=b.prototype.addMarker}).call(this);
